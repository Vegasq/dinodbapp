{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DinoDB Documentation \u00b6 Welcome to DinoDB, a modern native macOS application for managing AWS DynamoDB tables. What is DinoDB? \u00b6 DinoDB is a powerful, intuitive macOS application that provides a seamless interface for working with AWS DynamoDB. Built with SwiftUI and the AWS SDK for Swift, it offers enterprise-grade security and performance monitoring capabilities. Key Features \u00b6 Multiple AWS Account Management : Securely store and switch between multiple AWS accounts Intuitive Table Operations : Browse, query, and manage DynamoDB data with ease Real-time Monitoring : CloudWatch integration with interactive charts and alerts Modern Native Interface : Built with SwiftUI for a true macOS experience Advanced Security : Keychain integration and secure credential management Quick Links \u00b6 Installation Guide - Get DinoDB up and running Quick Start - Your first steps with DinoDB Account Management - Managing AWS accounts Table Operations - Working with DynamoDB tables Getting Help \u00b6 \ud83d\udcd6 Browse the User Guide for detailed walkthroughs \ud83d\udd27 Check the Development Guide to contribute \ud83d\udc1b Report issues on GitHub DinoDB - Modern DynamoDB management for macOS","title":"Home"},{"location":"#dinodb-documentation","text":"Welcome to DinoDB, a modern native macOS application for managing AWS DynamoDB tables.","title":"DinoDB Documentation"},{"location":"#what-is-dinodb","text":"DinoDB is a powerful, intuitive macOS application that provides a seamless interface for working with AWS DynamoDB. Built with SwiftUI and the AWS SDK for Swift, it offers enterprise-grade security and performance monitoring capabilities.","title":"What is DinoDB?"},{"location":"#key-features","text":"Multiple AWS Account Management : Securely store and switch between multiple AWS accounts Intuitive Table Operations : Browse, query, and manage DynamoDB data with ease Real-time Monitoring : CloudWatch integration with interactive charts and alerts Modern Native Interface : Built with SwiftUI for a true macOS experience Advanced Security : Keychain integration and secure credential management","title":"Key Features"},{"location":"#quick-links","text":"Installation Guide - Get DinoDB up and running Quick Start - Your first steps with DinoDB Account Management - Managing AWS accounts Table Operations - Working with DynamoDB tables","title":"Quick Links"},{"location":"#getting-help","text":"\ud83d\udcd6 Browse the User Guide for detailed walkthroughs \ud83d\udd27 Check the Development Guide to contribute \ud83d\udc1b Report issues on GitHub DinoDB - Modern DynamoDB management for macOS","title":"Getting Help"},{"location":"api/core/","text":"Core Features \u00b6 Overview of DinoDB's main features and capabilities. Account Management \u00b6 DinoDB supports multiple AWS account configurations: AWS Credentials File Integration \u00b6 Automatically discovers accounts from ~/.aws/credentials Read-only access to existing AWS profiles Visual distinction with document icons Secure Account Storage \u00b6 Store accounts directly in DinoDB Credentials secured in macOS Keychain Full editing and management capabilities Account Features \u00b6 Multiple account support Region-specific configurations Tag-based organization Connection status indicators Table Operations \u00b6 Data Viewing \u00b6 Table View : Spreadsheet-like interface with sortable columns JSON View : Syntax-highlighted DynamoDB JSON format Pagination : Configurable page sizes (10-250 items) Search & Filter : Find specific tables and data CRUD Operations \u00b6 Create : Add new items with form builder or JSON editor Read : Browse and search table data efficiently Update : Edit items with inline editing or detail views Delete : Remove items with confirmation dialogs Advanced Querying \u00b6 Query Builder : Visual interface for complex queries Filter Expressions : Attribute-based filtering Index Utilization : Automatic optimization suggestions Export Options : Multiple format support Monitoring & Metrics \u00b6 CloudWatch Integration \u00b6 Real-time performance metrics from AWS CloudWatch Interactive charts with multiple time ranges Automatic refresh every 60 seconds Historical trend analysis Metric Categories \u00b6 Capacity : Read/write capacity utilization Performance : Latency and throughput metrics Errors : User and system error tracking Storage : Item count and table size metrics Alert System \u00b6 Configurable threshold-based alerts Multiple severity levels (Info, Warning, Critical) Native macOS notifications Visual alert indicators in dashboard User Interface \u00b6 Modern Design \u00b6 Native macOS interface following Human Interface Guidelines Clean, intuitive layout optimized for productivity Responsive design adapting to window sizes Smooth animations and transitions Theme Support \u00b6 Light, Dark, and System theme options Live theme switching without restart Consistent styling across all views Accessibility support Navigation \u00b6 Three-column split view layout Sidebar for accounts and tables Context-sensitive detail views Keyboard shortcut support This is user-facing documentation focused on features and capabilities","title":"Core Features"},{"location":"api/core/#core-features","text":"Overview of DinoDB's main features and capabilities.","title":"Core Features"},{"location":"api/core/#account-management","text":"DinoDB supports multiple AWS account configurations:","title":"Account Management"},{"location":"api/core/#aws-credentials-file-integration","text":"Automatically discovers accounts from ~/.aws/credentials Read-only access to existing AWS profiles Visual distinction with document icons","title":"AWS Credentials File Integration"},{"location":"api/core/#secure-account-storage","text":"Store accounts directly in DinoDB Credentials secured in macOS Keychain Full editing and management capabilities","title":"Secure Account Storage"},{"location":"api/core/#account-features","text":"Multiple account support Region-specific configurations Tag-based organization Connection status indicators","title":"Account Features"},{"location":"api/core/#table-operations","text":"","title":"Table Operations"},{"location":"api/core/#data-viewing","text":"Table View : Spreadsheet-like interface with sortable columns JSON View : Syntax-highlighted DynamoDB JSON format Pagination : Configurable page sizes (10-250 items) Search & Filter : Find specific tables and data","title":"Data Viewing"},{"location":"api/core/#crud-operations","text":"Create : Add new items with form builder or JSON editor Read : Browse and search table data efficiently Update : Edit items with inline editing or detail views Delete : Remove items with confirmation dialogs","title":"CRUD Operations"},{"location":"api/core/#advanced-querying","text":"Query Builder : Visual interface for complex queries Filter Expressions : Attribute-based filtering Index Utilization : Automatic optimization suggestions Export Options : Multiple format support","title":"Advanced Querying"},{"location":"api/core/#monitoring-metrics","text":"","title":"Monitoring &amp; Metrics"},{"location":"api/core/#cloudwatch-integration","text":"Real-time performance metrics from AWS CloudWatch Interactive charts with multiple time ranges Automatic refresh every 60 seconds Historical trend analysis","title":"CloudWatch Integration"},{"location":"api/core/#metric-categories","text":"Capacity : Read/write capacity utilization Performance : Latency and throughput metrics Errors : User and system error tracking Storage : Item count and table size metrics","title":"Metric Categories"},{"location":"api/core/#alert-system","text":"Configurable threshold-based alerts Multiple severity levels (Info, Warning, Critical) Native macOS notifications Visual alert indicators in dashboard","title":"Alert System"},{"location":"api/core/#user-interface","text":"","title":"User Interface"},{"location":"api/core/#modern-design","text":"Native macOS interface following Human Interface Guidelines Clean, intuitive layout optimized for productivity Responsive design adapting to window sizes Smooth animations and transitions","title":"Modern Design"},{"location":"api/core/#theme-support","text":"Light, Dark, and System theme options Live theme switching without restart Consistent styling across all views Accessibility support","title":"Theme Support"},{"location":"api/core/#navigation","text":"Three-column split view layout Sidebar for accounts and tables Context-sensitive detail views Keyboard shortcut support This is user-facing documentation focused on features and capabilities","title":"Navigation"},{"location":"api/managers/","text":"Features Overview \u00b6 Key features and capabilities available in DinoDB. Account Management Features \u00b6 Multi-Account Support \u00b6 Store and manage multiple AWS accounts Switch between accounts seamlessly Visual account status indicators Secure credential storage AWS Integration \u00b6 Native support for AWS credentials file Automatic profile discovery Region-specific account configurations IAM permission validation Table Management Features \u00b6 Table Discovery \u00b6 Automatic table listing from DynamoDB Search and filter capabilities Favorites system for frequently used tables Table metadata display Data Operations \u00b6 Browse table data with pagination Multiple view formats (Table/JSON) Sortable columns and filtering Bulk operations support Query Features \u00b6 Visual Query Builder \u00b6 Drag-and-drop query construction Partition and sort key queries Filter expression builder Index selection assistance Query Optimization \u00b6 Automatic performance suggestions Cost estimation tools Query execution plans Result caching Monitoring Features \u00b6 Real-Time Metrics \u00b6 Live CloudWatch data integration Interactive chart visualizations Multiple time range selections Trend analysis indicators Alert Management \u00b6 Configurable metric thresholds Multiple alert severity levels System notification integration Alert history tracking User Experience Features \u00b6 Interface Design \u00b6 Native macOS look and feel Responsive layout design Accessibility compliance Dark mode support Productivity Tools \u00b6 Keyboard shortcuts Context menus Batch operations Export capabilities This documentation focuses on user-visible features and capabilities","title":"Features Overview"},{"location":"api/managers/#features-overview","text":"Key features and capabilities available in DinoDB.","title":"Features Overview"},{"location":"api/managers/#account-management-features","text":"","title":"Account Management Features"},{"location":"api/managers/#multi-account-support","text":"Store and manage multiple AWS accounts Switch between accounts seamlessly Visual account status indicators Secure credential storage","title":"Multi-Account Support"},{"location":"api/managers/#aws-integration","text":"Native support for AWS credentials file Automatic profile discovery Region-specific account configurations IAM permission validation","title":"AWS Integration"},{"location":"api/managers/#table-management-features","text":"","title":"Table Management Features"},{"location":"api/managers/#table-discovery","text":"Automatic table listing from DynamoDB Search and filter capabilities Favorites system for frequently used tables Table metadata display","title":"Table Discovery"},{"location":"api/managers/#data-operations","text":"Browse table data with pagination Multiple view formats (Table/JSON) Sortable columns and filtering Bulk operations support","title":"Data Operations"},{"location":"api/managers/#query-features","text":"","title":"Query Features"},{"location":"api/managers/#visual-query-builder","text":"Drag-and-drop query construction Partition and sort key queries Filter expression builder Index selection assistance","title":"Visual Query Builder"},{"location":"api/managers/#query-optimization","text":"Automatic performance suggestions Cost estimation tools Query execution plans Result caching","title":"Query Optimization"},{"location":"api/managers/#monitoring-features","text":"","title":"Monitoring Features"},{"location":"api/managers/#real-time-metrics","text":"Live CloudWatch data integration Interactive chart visualizations Multiple time range selections Trend analysis indicators","title":"Real-Time Metrics"},{"location":"api/managers/#alert-management","text":"Configurable metric thresholds Multiple alert severity levels System notification integration Alert history tracking","title":"Alert Management"},{"location":"api/managers/#user-experience-features","text":"","title":"User Experience Features"},{"location":"api/managers/#interface-design","text":"Native macOS look and feel Responsive layout design Accessibility compliance Dark mode support","title":"Interface Design"},{"location":"api/managers/#productivity-tools","text":"Keyboard shortcuts Context menus Batch operations Export capabilities This documentation focuses on user-visible features and capabilities","title":"Productivity Tools"},{"location":"api/models/","text":"Data Models \u00b6 Understanding DinoDB's data structures and organization. Account Model \u00b6 Account Properties \u00b6 Each AWS account in DinoDB contains: Name : Descriptive account identifier Region : AWS region (e.g., us-east-1, us-west-2) Description : Optional account description Tags : Organizational labels for categorization Created Date : When the account was added to DinoDB Account Types \u00b6 DinoDB supports two types of accounts: Stored Accounts \u00b6 Saved directly in DinoDB Credentials stored securely in macOS Keychain Full editing capabilities Custom metadata support AWS Profile Accounts \u00b6 Read from ~/.aws/credentials file Read-only access Automatically synchronized Marked with document icon Table Information \u00b6 Table Metadata \u00b6 DinoDB displays comprehensive table information: Table Name : DynamoDB table identifier Item Count : Approximate number of items Table Size : Storage size in bytes Key Schema : Partition and sort key definitions Provisioned Throughput : Read/write capacity settings Global Secondary Indexes : Additional query patterns Local Secondary Indexes : Alternative sort key options Table Status \u00b6 Active : Table is available for operations Creating : Table is being created Updating : Table modification in progress Deleting : Table deletion in progress Item Structure \u00b6 DynamoDB Item Format \u00b6 Items in DynamoDB use a specific attribute-value format: { \"id\" : { \"S\" : \"user123\" }, \"name\" : { \"S\" : \"John Doe\" }, \"age\" : { \"N\" : \"30\" }, \"active\" : { \"BOOL\" : true }, \"tags\" : { \"SS\" : [ \"premium\" , \"verified\" ]} } Attribute Types \u00b6 DinoDB supports all DynamoDB attribute types: S : String N : Number B : Binary SS : String Set NS : Number Set BS : Binary Set M : Map (nested object) L : List (array) NULL : Null value BOOL : Boolean Query Parameters \u00b6 Query Configuration \u00b6 When building queries, you can specify: Partition Key : Required equality condition Sort Key : Optional range or equality condition Filter Expression : Additional item filtering Projection Expression : Specific attributes to return Index Name : Global or Local Secondary Index Limit : Maximum items to return Scan Forward : Sort order for results Pagination \u00b6 DinoDB handles large result sets through: Page Size : Configurable items per page Last Evaluated Key : Continuation token Total Count : Estimated total items Page Navigation : Forward/backward controls This documentation describes the data structures users work with in DinoDB","title":"Data Models"},{"location":"api/models/#data-models","text":"Understanding DinoDB's data structures and organization.","title":"Data Models"},{"location":"api/models/#account-model","text":"","title":"Account Model"},{"location":"api/models/#account-properties","text":"Each AWS account in DinoDB contains: Name : Descriptive account identifier Region : AWS region (e.g., us-east-1, us-west-2) Description : Optional account description Tags : Organizational labels for categorization Created Date : When the account was added to DinoDB","title":"Account Properties"},{"location":"api/models/#account-types","text":"DinoDB supports two types of accounts:","title":"Account Types"},{"location":"api/models/#stored-accounts","text":"Saved directly in DinoDB Credentials stored securely in macOS Keychain Full editing capabilities Custom metadata support","title":"Stored Accounts"},{"location":"api/models/#aws-profile-accounts","text":"Read from ~/.aws/credentials file Read-only access Automatically synchronized Marked with document icon","title":"AWS Profile Accounts"},{"location":"api/models/#table-information","text":"","title":"Table Information"},{"location":"api/models/#table-metadata","text":"DinoDB displays comprehensive table information: Table Name : DynamoDB table identifier Item Count : Approximate number of items Table Size : Storage size in bytes Key Schema : Partition and sort key definitions Provisioned Throughput : Read/write capacity settings Global Secondary Indexes : Additional query patterns Local Secondary Indexes : Alternative sort key options","title":"Table Metadata"},{"location":"api/models/#table-status","text":"Active : Table is available for operations Creating : Table is being created Updating : Table modification in progress Deleting : Table deletion in progress","title":"Table Status"},{"location":"api/models/#item-structure","text":"","title":"Item Structure"},{"location":"api/models/#dynamodb-item-format","text":"Items in DynamoDB use a specific attribute-value format: { \"id\" : { \"S\" : \"user123\" }, \"name\" : { \"S\" : \"John Doe\" }, \"age\" : { \"N\" : \"30\" }, \"active\" : { \"BOOL\" : true }, \"tags\" : { \"SS\" : [ \"premium\" , \"verified\" ]} }","title":"DynamoDB Item Format"},{"location":"api/models/#attribute-types","text":"DinoDB supports all DynamoDB attribute types: S : String N : Number B : Binary SS : String Set NS : Number Set BS : Binary Set M : Map (nested object) L : List (array) NULL : Null value BOOL : Boolean","title":"Attribute Types"},{"location":"api/models/#query-parameters","text":"","title":"Query Parameters"},{"location":"api/models/#query-configuration","text":"When building queries, you can specify: Partition Key : Required equality condition Sort Key : Optional range or equality condition Filter Expression : Additional item filtering Projection Expression : Specific attributes to return Index Name : Global or Local Secondary Index Limit : Maximum items to return Scan Forward : Sort order for results","title":"Query Configuration"},{"location":"api/models/#pagination","text":"DinoDB handles large result sets through: Page Size : Configurable items per page Last Evaluated Key : Continuation token Total Count : Estimated total items Page Navigation : Forward/backward controls This documentation describes the data structures users work with in DinoDB","title":"Pagination"},{"location":"development/architecture/","text":"Architecture \u00b6 Deep dive into DinoDB's technical architecture and design patterns. Overview \u00b6 DinoDB follows modern Swift and SwiftUI architectural patterns, emphasizing: - MVVM Architecture : Clear separation of concerns - Reactive Programming : SwiftUI's declarative approach - Dependency Injection : Testable and maintainable code - Async/Await : Modern Swift concurrency Core Architecture \u00b6 MVVM Pattern \u00b6 Views (SwiftUI) \u2194 ViewModels (ObservableObject) \u2194 Models (SwiftData) \u2193 Managers (Business Logic) \u2193 AWS SDK (External Services) Key Components \u00b6 Views Layer \u00b6 SwiftUI Views : Declarative UI components Navigation : Split view and sheet-based navigation State Management : @State, @StateObject, @ObservedObject User Interactions : Gesture handling and form validation ViewModels Layer \u00b6 ObservableObject Classes : Reactive state management Published Properties : Automatic UI updates Business Logic : Orchestration of manager operations Error Handling : User-friendly error presentation Models Layer \u00b6 SwiftData Models : Core data persistence Value Types : Immutable data structures Protocols : Interface definitions Extensions : Shared functionality Managers Layer \u00b6 Service Classes : External API integration Singleton Pattern : Shared state management Async Operations : Network and I/O operations Caching : Performance optimization Core Technologies \u00b6 SwiftUI Framework \u00b6 Declarative Syntax : UI as a function of state Native Performance : Optimized for macOS Accessibility : Built-in accessibility support Animation System : Smooth state transitions SwiftData Integration \u00b6 Model Persistence : Account and settings storage Query Interface : Type-safe data queries Relationship Management : Connected data models Migration Support : Schema evolution AWS SDK for Swift \u00b6 DynamoDB Client : Table and item operations CloudWatch Client : Metrics and monitoring Credential Management : Secure authentication Error Handling : Comprehensive error types State Management \u00b6 Application State \u00b6 Global State : TableSelectionManager singleton Local State : View-specific @State properties Shared State : @StateObject for cross-view data Persistence : UserDefaults and SwiftData Data Flow \u00b6 User Action \u2192 View \u2192 ViewModel \u2192 Manager \u2192 AWS API \u2193 State Update \u2192 UI Refresh Reactive Updates \u00b6 Published Properties : Automatic UI updates Combine Integration : Reactive data streams Observer Pattern : Decoupled component communication Debouncing : Performance optimization for rapid updates Security Architecture \u00b6 Credential Management \u00b6 Keychain Integration : Secure storage of AWS credentials Read-only AWS Profiles : Safe access to credentials file No Plaintext Storage : All sensitive data encrypted App Sandboxing : macOS security boundaries Data Protection \u00b6 In-Memory Processing : Minimal data persistence Secure Deletion : Proper cleanup of sensitive data Access Control : User-controlled data access Audit Logging : Security event tracking Performance Architecture \u00b6 Async Operations \u00b6 Swift Concurrency : Modern async/await patterns Task Management : Proper task lifecycle Cancellation Support : Responsive user interactions Error Propagation : Structured error handling Memory Management \u00b6 ARC Optimization : Automatic reference counting Weak References : Avoiding retain cycles Lazy Loading : On-demand resource allocation Cache Management : Intelligent data caching Network Optimization \u00b6 Connection Pooling : Efficient AWS API usage Request Batching : Reduced API calls Retry Logic : Resilient network operations Timeout Handling : Responsive user experience Monitoring Architecture \u00b6 Debug Logging System \u00b6 Structured Logging : Categorized log entries Performance Tracking : Operation timing User Action Logging : Interaction tracking Error Correlation : Comprehensive error context Metrics Integration \u00b6 CloudWatch API : Real-time metrics collection Chart Rendering : Native SwiftUI Charts Data Transformation : Metric processing Alert Processing : Threshold-based notifications Testing Architecture \u00b6 Unit Testing \u00b6 Swift Testing Framework : Modern test structure Mock Objects : Isolated component testing Async Testing : Concurrent operation validation Code Coverage : Comprehensive test metrics Integration Testing \u00b6 AWS Service Mocking : Controlled testing environment End-to-End Flows : Complete user scenarios Performance Testing : Load and stress testing Security Testing : Vulnerability assessment This is a stub - full documentation will be generated from project source","title":"Architecture"},{"location":"development/architecture/#architecture","text":"Deep dive into DinoDB's technical architecture and design patterns.","title":"Architecture"},{"location":"development/architecture/#overview","text":"DinoDB follows modern Swift and SwiftUI architectural patterns, emphasizing: - MVVM Architecture : Clear separation of concerns - Reactive Programming : SwiftUI's declarative approach - Dependency Injection : Testable and maintainable code - Async/Await : Modern Swift concurrency","title":"Overview"},{"location":"development/architecture/#core-architecture","text":"","title":"Core Architecture"},{"location":"development/architecture/#mvvm-pattern","text":"Views (SwiftUI) \u2194 ViewModels (ObservableObject) \u2194 Models (SwiftData) \u2193 Managers (Business Logic) \u2193 AWS SDK (External Services)","title":"MVVM Pattern"},{"location":"development/architecture/#key-components","text":"","title":"Key Components"},{"location":"development/architecture/#views-layer","text":"SwiftUI Views : Declarative UI components Navigation : Split view and sheet-based navigation State Management : @State, @StateObject, @ObservedObject User Interactions : Gesture handling and form validation","title":"Views Layer"},{"location":"development/architecture/#viewmodels-layer","text":"ObservableObject Classes : Reactive state management Published Properties : Automatic UI updates Business Logic : Orchestration of manager operations Error Handling : User-friendly error presentation","title":"ViewModels Layer"},{"location":"development/architecture/#models-layer","text":"SwiftData Models : Core data persistence Value Types : Immutable data structures Protocols : Interface definitions Extensions : Shared functionality","title":"Models Layer"},{"location":"development/architecture/#managers-layer","text":"Service Classes : External API integration Singleton Pattern : Shared state management Async Operations : Network and I/O operations Caching : Performance optimization","title":"Managers Layer"},{"location":"development/architecture/#core-technologies","text":"","title":"Core Technologies"},{"location":"development/architecture/#swiftui-framework","text":"Declarative Syntax : UI as a function of state Native Performance : Optimized for macOS Accessibility : Built-in accessibility support Animation System : Smooth state transitions","title":"SwiftUI Framework"},{"location":"development/architecture/#swiftdata-integration","text":"Model Persistence : Account and settings storage Query Interface : Type-safe data queries Relationship Management : Connected data models Migration Support : Schema evolution","title":"SwiftData Integration"},{"location":"development/architecture/#aws-sdk-for-swift","text":"DynamoDB Client : Table and item operations CloudWatch Client : Metrics and monitoring Credential Management : Secure authentication Error Handling : Comprehensive error types","title":"AWS SDK for Swift"},{"location":"development/architecture/#state-management","text":"","title":"State Management"},{"location":"development/architecture/#application-state","text":"Global State : TableSelectionManager singleton Local State : View-specific @State properties Shared State : @StateObject for cross-view data Persistence : UserDefaults and SwiftData","title":"Application State"},{"location":"development/architecture/#data-flow","text":"User Action \u2192 View \u2192 ViewModel \u2192 Manager \u2192 AWS API \u2193 State Update \u2192 UI Refresh","title":"Data Flow"},{"location":"development/architecture/#reactive-updates","text":"Published Properties : Automatic UI updates Combine Integration : Reactive data streams Observer Pattern : Decoupled component communication Debouncing : Performance optimization for rapid updates","title":"Reactive Updates"},{"location":"development/architecture/#security-architecture","text":"","title":"Security Architecture"},{"location":"development/architecture/#credential-management","text":"Keychain Integration : Secure storage of AWS credentials Read-only AWS Profiles : Safe access to credentials file No Plaintext Storage : All sensitive data encrypted App Sandboxing : macOS security boundaries","title":"Credential Management"},{"location":"development/architecture/#data-protection","text":"In-Memory Processing : Minimal data persistence Secure Deletion : Proper cleanup of sensitive data Access Control : User-controlled data access Audit Logging : Security event tracking","title":"Data Protection"},{"location":"development/architecture/#performance-architecture","text":"","title":"Performance Architecture"},{"location":"development/architecture/#async-operations","text":"Swift Concurrency : Modern async/await patterns Task Management : Proper task lifecycle Cancellation Support : Responsive user interactions Error Propagation : Structured error handling","title":"Async Operations"},{"location":"development/architecture/#memory-management","text":"ARC Optimization : Automatic reference counting Weak References : Avoiding retain cycles Lazy Loading : On-demand resource allocation Cache Management : Intelligent data caching","title":"Memory Management"},{"location":"development/architecture/#network-optimization","text":"Connection Pooling : Efficient AWS API usage Request Batching : Reduced API calls Retry Logic : Resilient network operations Timeout Handling : Responsive user experience","title":"Network Optimization"},{"location":"development/architecture/#monitoring-architecture","text":"","title":"Monitoring Architecture"},{"location":"development/architecture/#debug-logging-system","text":"Structured Logging : Categorized log entries Performance Tracking : Operation timing User Action Logging : Interaction tracking Error Correlation : Comprehensive error context","title":"Debug Logging System"},{"location":"development/architecture/#metrics-integration","text":"CloudWatch API : Real-time metrics collection Chart Rendering : Native SwiftUI Charts Data Transformation : Metric processing Alert Processing : Threshold-based notifications","title":"Metrics Integration"},{"location":"development/architecture/#testing-architecture","text":"","title":"Testing Architecture"},{"location":"development/architecture/#unit-testing","text":"Swift Testing Framework : Modern test structure Mock Objects : Isolated component testing Async Testing : Concurrent operation validation Code Coverage : Comprehensive test metrics","title":"Unit Testing"},{"location":"development/architecture/#integration-testing","text":"AWS Service Mocking : Controlled testing environment End-to-End Flows : Complete user scenarios Performance Testing : Load and stress testing Security Testing : Vulnerability assessment This is a stub - full documentation will be generated from project source","title":"Integration Testing"},{"location":"development/build-guide/","text":"Build Guide \u00b6 Complete guide to building DinoDB from source. Prerequisites \u00b6 Development Environment \u00b6 Xcode : 15.0 or later macOS : 14.0 (Sonoma) or later for development Swift : 5.9 or later Git : For source control Required SDKs \u00b6 AWS SDK for Swift v1.0+ SwiftUI and SwiftData frameworks CloudWatch SDK components Quick Start \u00b6 Clone Repository \u00b6 git clone https://github.com/vegasq/dinodbapp.git cd dinodbapp Standard Build \u00b6 xcodebuild -project DinoDB.xcodeproj -scheme DinoDB -configuration Debug build Clean Build \u00b6 xcodebuild -project DinoDB.xcodeproj -scheme DinoDB clean build Build Configurations \u00b6 Debug Configuration \u00b6 Full debugging symbols Debug logging enabled Development provisioning Faster compilation Release Configuration \u00b6 Optimized performance Reduced binary size Distribution provisioning Production-ready build Project Structure \u00b6 Core Directories \u00b6 DinoDB/ \u251c\u2500\u2500 Models/ # SwiftData models \u251c\u2500\u2500 Views/ # SwiftUI views \u251c\u2500\u2500 Managers/ # Business logic \u251c\u2500\u2500 Documentation/ # Technical docs \u2514\u2500\u2500 Tests/ # Unit and UI tests Key Files \u00b6 DinoDBApp.swift : Application entry point ContentView.swift : Main navigation interface DynamoDBManager.swift : AWS integration Account.swift : Core data model Dependencies \u00b6 AWS SDK for Swift \u00b6 DynamoDB client integration CloudWatch metrics support Automatic dependency resolution Version compatibility matrix SwiftUI Frameworks \u00b6 Native macOS interface components Charts framework for metrics UserNotifications for alerts Keychain Services for security Build Scripts \u00b6 Automated Building \u00b6 The project includes build automation scripts for common scenarios: # Full build with tests ./scripts/build-full.sh # Quick development build ./scripts/build-dev.sh # Release build with signing ./scripts/build-release.sh Testing \u00b6 Unit Tests \u00b6 xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBTests UI Tests \u00b6 xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBUITests Code Coverage \u00b6 xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -enableCodeCoverage YES Troubleshooting \u00b6 Common Build Issues \u00b6 SDK Version Mismatch : Update Xcode and Swift Dependency Conflicts : Clean derived data Signing Issues : Check provisioning profiles Architecture Errors : Verify target settings Debug Tools \u00b6 Xcode debugger integration Performance profiling tools Memory leak detection Network request monitoring Build Optimization \u00b6 Parallel build settings Compiler optimization flags Link-time optimization Dead code elimination This is a stub - full documentation will be generated from project source","title":"Build Guide"},{"location":"development/build-guide/#build-guide","text":"Complete guide to building DinoDB from source.","title":"Build Guide"},{"location":"development/build-guide/#prerequisites","text":"","title":"Prerequisites"},{"location":"development/build-guide/#development-environment","text":"Xcode : 15.0 or later macOS : 14.0 (Sonoma) or later for development Swift : 5.9 or later Git : For source control","title":"Development Environment"},{"location":"development/build-guide/#required-sdks","text":"AWS SDK for Swift v1.0+ SwiftUI and SwiftData frameworks CloudWatch SDK components","title":"Required SDKs"},{"location":"development/build-guide/#quick-start","text":"","title":"Quick Start"},{"location":"development/build-guide/#clone-repository","text":"git clone https://github.com/vegasq/dinodbapp.git cd dinodbapp","title":"Clone Repository"},{"location":"development/build-guide/#standard-build","text":"xcodebuild -project DinoDB.xcodeproj -scheme DinoDB -configuration Debug build","title":"Standard Build"},{"location":"development/build-guide/#clean-build","text":"xcodebuild -project DinoDB.xcodeproj -scheme DinoDB clean build","title":"Clean Build"},{"location":"development/build-guide/#build-configurations","text":"","title":"Build Configurations"},{"location":"development/build-guide/#debug-configuration","text":"Full debugging symbols Debug logging enabled Development provisioning Faster compilation","title":"Debug Configuration"},{"location":"development/build-guide/#release-configuration","text":"Optimized performance Reduced binary size Distribution provisioning Production-ready build","title":"Release Configuration"},{"location":"development/build-guide/#project-structure","text":"","title":"Project Structure"},{"location":"development/build-guide/#core-directories","text":"DinoDB/ \u251c\u2500\u2500 Models/ # SwiftData models \u251c\u2500\u2500 Views/ # SwiftUI views \u251c\u2500\u2500 Managers/ # Business logic \u251c\u2500\u2500 Documentation/ # Technical docs \u2514\u2500\u2500 Tests/ # Unit and UI tests","title":"Core Directories"},{"location":"development/build-guide/#key-files","text":"DinoDBApp.swift : Application entry point ContentView.swift : Main navigation interface DynamoDBManager.swift : AWS integration Account.swift : Core data model","title":"Key Files"},{"location":"development/build-guide/#dependencies","text":"","title":"Dependencies"},{"location":"development/build-guide/#aws-sdk-for-swift","text":"DynamoDB client integration CloudWatch metrics support Automatic dependency resolution Version compatibility matrix","title":"AWS SDK for Swift"},{"location":"development/build-guide/#swiftui-frameworks","text":"Native macOS interface components Charts framework for metrics UserNotifications for alerts Keychain Services for security","title":"SwiftUI Frameworks"},{"location":"development/build-guide/#build-scripts","text":"","title":"Build Scripts"},{"location":"development/build-guide/#automated-building","text":"The project includes build automation scripts for common scenarios: # Full build with tests ./scripts/build-full.sh # Quick development build ./scripts/build-dev.sh # Release build with signing ./scripts/build-release.sh","title":"Automated Building"},{"location":"development/build-guide/#testing","text":"","title":"Testing"},{"location":"development/build-guide/#unit-tests","text":"xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBTests","title":"Unit Tests"},{"location":"development/build-guide/#ui-tests","text":"xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBUITests","title":"UI Tests"},{"location":"development/build-guide/#code-coverage","text":"xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -enableCodeCoverage YES","title":"Code Coverage"},{"location":"development/build-guide/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"development/build-guide/#common-build-issues","text":"SDK Version Mismatch : Update Xcode and Swift Dependency Conflicts : Clean derived data Signing Issues : Check provisioning profiles Architecture Errors : Verify target settings","title":"Common Build Issues"},{"location":"development/build-guide/#debug-tools","text":"Xcode debugger integration Performance profiling tools Memory leak detection Network request monitoring","title":"Debug Tools"},{"location":"development/build-guide/#build-optimization","text":"Parallel build settings Compiler optimization flags Link-time optimization Dead code elimination This is a stub - full documentation will be generated from project source","title":"Build Optimization"},{"location":"development/contributing/","text":"Contributing \u00b6 Guidelines for contributing to DinoDB development. Getting Started \u00b6 Development Setup \u00b6 Fork the repository on GitHub Clone your fork locally Install Xcode 15.0 or later Open DinoDB.xcodeproj Build and run the project Prerequisites \u00b6 macOS 14.0+ for development Understanding of SwiftUI and SwiftData Familiarity with AWS DynamoDB Git workflow knowledge Development Guidelines \u00b6 Code Style \u00b6 Follow Swift API Design Guidelines Use SwiftLint for consistent formatting Maintain existing architectural patterns Write self-documenting code Naming Conventions \u00b6 Classes : PascalCase (e.g., DynamoDBManager ) Properties : camelCase (e.g., tableName ) Constants : camelCase (e.g., defaultPageSize ) Enums : PascalCase cases (e.g., .loading , .loaded ) File Organization \u00b6 Group related functionality in folders Separate views, models, and managers Keep files under 500 lines when possible Use extensions for protocol conformance Mandatory Requirements \u00b6 Debug Logging \u00b6 ALL code changes MUST include comprehensive debug logging: // Log user actions DebugLogger . shared . log ( \"User clicked refresh button\" , category : \"UserAction\" ) // Time AWS operations let timer = DebugLogger . shared . startTimer () // ... AWS operation DebugLogger . shared . endTimer ( timer , operation : \"ListTables\" , category : \"AWS\" ) // Log errors with context DebugLogger . shared . log ( \"Failed to connect: \\( error ) \" , category : \"Error\" ) Required Categories \u00b6 UserAction : All direct user interactions AWS : DynamoDB and CloudWatch API calls DataOp : CRUD operations Auth : Authentication events Performance : Operations >100ms Error : All error conditions Security Requirements \u00b6 \u274c NEVER log : AWS credentials, PII, sensitive data \u2705 Safe to log : Account names, table names, counts, errors Always use appropriate log categories Include context but protect privacy Pull Request Process \u00b6 Before Submitting \u00b6 Add comprehensive logging to all new code Write or update unit tests Run full test suite Update documentation if needed Test debug panel functionality PR Checklist \u00b6 [ ] Debug logging added with appropriate categories [ ] No sensitive data in logs [ ] Tests pass with >90% coverage [ ] No SwiftLint warnings [ ] Documentation updated [ ] Debug panel tested PR Description Template \u00b6 ## Summary Brief description of changes ## Changes Made - Detailed list of modifications - New features or bug fixes - Performance improvements ## Testing - Unit tests added/updated - Manual testing performed - Debug logging verified ## Debug Logging - Categories used: UserAction, AWS, DataOp, etc. - No sensitive data logged - Debug panel functionality tested Testing Requirements \u00b6 Unit Tests \u00b6 Swift Testing Framework : Use modern testing patterns 90% Coverage : Target for all new code Mock AWS Services : Isolated testing Async Testing : Proper concurrent testing Integration Tests \u00b6 End-to-end user workflows AWS service integration Error handling scenarios Performance benchmarks Manual Testing \u00b6 Test in both light and dark themes Verify keyboard shortcuts work Check accessibility features Validate debug panel output Code Review Process \u00b6 Review Criteria \u00b6 Logging Compliance : Comprehensive debug logging Security : No credential exposure in logs Architecture : Follows MVVM patterns Performance : Efficient async operations Testing : Adequate test coverage Documentation : Clear and accurate Reviewer Responsibilities \u00b6 Verify debug logging requirements Check for security vulnerabilities Validate architectural consistency Ensure test coverage Review documentation updates Release Process \u00b6 Version Management \u00b6 Follow semantic versioning (MAJOR.MINOR.PATCH) Tag releases in Git Update changelog Build release notes Quality Gates \u00b6 All tests must pass Code coverage >90% No critical security issues Performance benchmarks met Debug logging verified Documentation \u00b6 Required Updates \u00b6 Update CLAUDE.md for architectural changes Add inline code documentation Update user-facing documentation Include examples and usage patterns Documentation Standards \u00b6 Clear, concise language Code examples with proper syntax highlighting Screenshots for UI changes Architecture diagrams for complex features Community Guidelines \u00b6 Communication \u00b6 Be respectful and inclusive Provide constructive feedback Ask questions when unclear Share knowledge openly Issue Reporting \u00b6 Use provided issue templates Include reproduction steps Provide system information Include debug logs (without sensitive data) Feature Requests \u00b6 Explain the use case clearly Consider existing patterns Discuss implementation approaches Consider maintenance burden This is a stub - full documentation will be generated from project source","title":"Contributing"},{"location":"development/contributing/#contributing","text":"Guidelines for contributing to DinoDB development.","title":"Contributing"},{"location":"development/contributing/#getting-started","text":"","title":"Getting Started"},{"location":"development/contributing/#development-setup","text":"Fork the repository on GitHub Clone your fork locally Install Xcode 15.0 or later Open DinoDB.xcodeproj Build and run the project","title":"Development Setup"},{"location":"development/contributing/#prerequisites","text":"macOS 14.0+ for development Understanding of SwiftUI and SwiftData Familiarity with AWS DynamoDB Git workflow knowledge","title":"Prerequisites"},{"location":"development/contributing/#development-guidelines","text":"","title":"Development Guidelines"},{"location":"development/contributing/#code-style","text":"Follow Swift API Design Guidelines Use SwiftLint for consistent formatting Maintain existing architectural patterns Write self-documenting code","title":"Code Style"},{"location":"development/contributing/#naming-conventions","text":"Classes : PascalCase (e.g., DynamoDBManager ) Properties : camelCase (e.g., tableName ) Constants : camelCase (e.g., defaultPageSize ) Enums : PascalCase cases (e.g., .loading , .loaded )","title":"Naming Conventions"},{"location":"development/contributing/#file-organization","text":"Group related functionality in folders Separate views, models, and managers Keep files under 500 lines when possible Use extensions for protocol conformance","title":"File Organization"},{"location":"development/contributing/#mandatory-requirements","text":"","title":"Mandatory Requirements"},{"location":"development/contributing/#debug-logging","text":"ALL code changes MUST include comprehensive debug logging: // Log user actions DebugLogger . shared . log ( \"User clicked refresh button\" , category : \"UserAction\" ) // Time AWS operations let timer = DebugLogger . shared . startTimer () // ... AWS operation DebugLogger . shared . endTimer ( timer , operation : \"ListTables\" , category : \"AWS\" ) // Log errors with context DebugLogger . shared . log ( \"Failed to connect: \\( error ) \" , category : \"Error\" )","title":"Debug Logging"},{"location":"development/contributing/#required-categories","text":"UserAction : All direct user interactions AWS : DynamoDB and CloudWatch API calls DataOp : CRUD operations Auth : Authentication events Performance : Operations >100ms Error : All error conditions","title":"Required Categories"},{"location":"development/contributing/#security-requirements","text":"\u274c NEVER log : AWS credentials, PII, sensitive data \u2705 Safe to log : Account names, table names, counts, errors Always use appropriate log categories Include context but protect privacy","title":"Security Requirements"},{"location":"development/contributing/#pull-request-process","text":"","title":"Pull Request Process"},{"location":"development/contributing/#before-submitting","text":"Add comprehensive logging to all new code Write or update unit tests Run full test suite Update documentation if needed Test debug panel functionality","title":"Before Submitting"},{"location":"development/contributing/#pr-checklist","text":"[ ] Debug logging added with appropriate categories [ ] No sensitive data in logs [ ] Tests pass with >90% coverage [ ] No SwiftLint warnings [ ] Documentation updated [ ] Debug panel tested","title":"PR Checklist"},{"location":"development/contributing/#pr-description-template","text":"## Summary Brief description of changes ## Changes Made - Detailed list of modifications - New features or bug fixes - Performance improvements ## Testing - Unit tests added/updated - Manual testing performed - Debug logging verified ## Debug Logging - Categories used: UserAction, AWS, DataOp, etc. - No sensitive data logged - Debug panel functionality tested","title":"PR Description Template"},{"location":"development/contributing/#testing-requirements","text":"","title":"Testing Requirements"},{"location":"development/contributing/#unit-tests","text":"Swift Testing Framework : Use modern testing patterns 90% Coverage : Target for all new code Mock AWS Services : Isolated testing Async Testing : Proper concurrent testing","title":"Unit Tests"},{"location":"development/contributing/#integration-tests","text":"End-to-end user workflows AWS service integration Error handling scenarios Performance benchmarks","title":"Integration Tests"},{"location":"development/contributing/#manual-testing","text":"Test in both light and dark themes Verify keyboard shortcuts work Check accessibility features Validate debug panel output","title":"Manual Testing"},{"location":"development/contributing/#code-review-process","text":"","title":"Code Review Process"},{"location":"development/contributing/#review-criteria","text":"Logging Compliance : Comprehensive debug logging Security : No credential exposure in logs Architecture : Follows MVVM patterns Performance : Efficient async operations Testing : Adequate test coverage Documentation : Clear and accurate","title":"Review Criteria"},{"location":"development/contributing/#reviewer-responsibilities","text":"Verify debug logging requirements Check for security vulnerabilities Validate architectural consistency Ensure test coverage Review documentation updates","title":"Reviewer Responsibilities"},{"location":"development/contributing/#release-process","text":"","title":"Release Process"},{"location":"development/contributing/#version-management","text":"Follow semantic versioning (MAJOR.MINOR.PATCH) Tag releases in Git Update changelog Build release notes","title":"Version Management"},{"location":"development/contributing/#quality-gates","text":"All tests must pass Code coverage >90% No critical security issues Performance benchmarks met Debug logging verified","title":"Quality Gates"},{"location":"development/contributing/#documentation","text":"","title":"Documentation"},{"location":"development/contributing/#required-updates","text":"Update CLAUDE.md for architectural changes Add inline code documentation Update user-facing documentation Include examples and usage patterns","title":"Required Updates"},{"location":"development/contributing/#documentation-standards","text":"Clear, concise language Code examples with proper syntax highlighting Screenshots for UI changes Architecture diagrams for complex features","title":"Documentation Standards"},{"location":"development/contributing/#community-guidelines","text":"","title":"Community Guidelines"},{"location":"development/contributing/#communication","text":"Be respectful and inclusive Provide constructive feedback Ask questions when unclear Share knowledge openly","title":"Communication"},{"location":"development/contributing/#issue-reporting","text":"Use provided issue templates Include reproduction steps Provide system information Include debug logs (without sensitive data)","title":"Issue Reporting"},{"location":"development/contributing/#feature-requests","text":"Explain the use case clearly Consider existing patterns Discuss implementation approaches Consider maintenance burden This is a stub - full documentation will be generated from project source","title":"Feature Requests"},{"location":"development/testing/","text":"Testing Guide \u00b6 Comprehensive testing strategy and guidelines for DinoDB. Testing Framework \u00b6 Swift Testing Framework \u00b6 DinoDB uses the modern Swift Testing framework (Swift 6 compatible): - Structured Testing : Clear test organization - Async Support : Built-in async/await testing - Parameterized Tests : Data-driven testing - Custom Expectations : Tailored assertions Testing Philosophy \u00b6 Test-Driven Development : Write tests before implementation 90% Coverage Target : Comprehensive test coverage Fast Feedback : Quick test execution Reliable Tests : Deterministic and stable Test Structure \u00b6 Directory Organization \u00b6 DinoDBTests/ \u251c\u2500\u2500 Unit/ \u2502 \u251c\u2500\u2500 Models/ \u2502 \u251c\u2500\u2500 Managers/ \u2502 \u2514\u2500\u2500 Utilities/ \u251c\u2500\u2500 Integration/ \u2502 \u251c\u2500\u2500 AWS/ \u2502 \u2514\u2500\u2500 DataFlow/ \u2514\u2500\u2500 UI/ \u251c\u2500\u2500 Views/ \u2514\u2500\u2500 Workflows/ Test Categories \u00b6 Unit Tests \u00b6 Models : SwiftData model validation Managers : Business logic testing Utilities : Helper function testing ViewModels : State management testing Integration Tests \u00b6 AWS Integration : DynamoDB operations Data Flow : End-to-end scenarios Authentication : Credential management Performance : Load and timing tests UI Tests \u00b6 User Workflows : Complete user scenarios Navigation : View transitions Forms : Input validation Accessibility : Screen reader support Running Tests \u00b6 Command Line \u00b6 # Run all tests xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB # Run only unit tests xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBTests # Run with code coverage xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -enableCodeCoverage YES # Run specific test class xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBTests/AccountModelTests Xcode Integration \u00b6 Test Navigator : Visual test management Test Reports : Detailed results and coverage Debugging : Breakpoints in tests Performance Testing : XCTMetric integration Test Coverage \u00b6 Current Coverage \u00b6 \u2705 KeychainHelper : 95% coverage \u2705 Account Model : 90% coverage \u2705 DynamoDBManager : 85% coverage \ud83d\udd04 CloudWatchManager : 70% coverage (in progress) \u23f3 UI Components : 60% coverage (planned) Coverage Requirements \u00b6 New Code : 90% minimum coverage Critical Paths : 100% coverage Security Code : 100% coverage Error Handling : 95% coverage Coverage Tools \u00b6 # Generate coverage report xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB \\ -enableCodeCoverage YES \\ -resultBundlePath TestResults.xcresult # View coverage in Xcode open TestResults.xcresult Testing Patterns \u00b6 Unit Test Example \u00b6 import Testing @ testable import DinoDB struct AccountModelTests { @ Test func testAccountCreation () async throws { // Given let account = Account ( name : \"Test Account\" , accessKeyId : \"AKIATEST\" , region : \"us-east-1\" ) // When let isValid = account . isValid // Then # expect ( isValid == true ) # expect ( account . name == \"Test Account\" ) } @ Test func testAccountValidation () async throws { // Given let invalidAccount = Account ( name : \"\" , accessKeyId : \"\" , region : \"\" ) // When/Then # expect ( invalidAccount . isValid == false ) } } Integration Test Example \u00b6 struct DynamoDBManagerTests { @ Test func testListTables () async throws { // Given let mockCredentials = AWSCredentials ( accessKey : \"test\" , secretKey : \"test\" ) let manager = DynamoDBManager () // When let tables = try await manager . listTables ( credentials : mockCredentials ) // Then # expect ( tables . count >= 0 ) } } UI Test Example \u00b6 import XCTest final class DinoDBUITests : XCTestCase { func testAccountListNavigation () throws { let app = XCUIApplication () app . launch () // Test account list appears XCTAssertTrue ( app . staticTexts [ \"Accounts\" ]. exists ) // Test add account button app . buttons [ \"Add Account\" ]. tap () XCTAssertTrue ( app . navigationBars [ \"Add Account\" ]. exists ) } } Mocking and Test Doubles \u00b6 AWS Service Mocking \u00b6 protocol DynamoDBClientProtocol { func listTables () async throws -> [ String ] } class MockDynamoDBClient : DynamoDBClientProtocol { var mockTables : [ String ] = [] var shouldThrowError = false func listTables () async throws -> [ String ] { if shouldThrowError { throw AWSError . unauthorized } return mockTables } } SwiftData Mocking \u00b6 @ MainActor class TestModelContainer { static let shared : ModelContainer = { let schema = Schema ([ Account . self ]) let config = ModelConfiguration ( isStoredInMemoryOnly : true ) return try ! ModelContainer ( for : schema , configurations : [ config ]) }() } Performance Testing \u00b6 Metrics Collection \u00b6 @ Test func testTableLoadPerformance () async throws { let startTime = CFAbsoluteTimeGetCurrent () // Perform operation let tables = try await dynamoDBManager . listTables () let timeElapsed = CFAbsoluteTimeGetCurrent () - startTime # expect ( timeElapsed < 2.0 ) // Should complete within 2 seconds } Memory Testing \u00b6 @ Test func testMemoryUsage () async throws { let initialMemory = getMemoryUsage () // Perform memory-intensive operation try await loadLargeDataset () // Force garbage collection autoreleasepool {} let finalMemory = getMemoryUsage () # expect ( finalMemory - initialMemory < 50_000_000 ) // 50MB limit } Test Data Management \u00b6 Test Fixtures \u00b6 struct TestData { static let sampleAccount = Account ( name : \"Test Account\" , accessKeyId : \"AKIATEST123\" , region : \"us-east-1\" ) static let sampleTables = [ \"Users\" , \"Products\" , \"Orders\" ] static let sampleItem : [ String : Any ] = [ \"id\" : \"123\" , \"name\" : \"Test Item\" , \"created\" : Date () ] } Database Seeding \u00b6 @ MainActor class DatabaseSeeder { static func seedTestData ( context : ModelContext ) { let accounts = [ TestData . sampleAccount , Account ( name : \"Prod Account\" , accessKeyId : \"AKIAPROD\" , region : \"us-west-2\" ) ] accounts . forEach { context . insert ( $0 ) } try ! context . save () } } Continuous Integration \u00b6 GitHub Actions \u00b6 name : Tests on : [ push , pull_request ] jobs : test : runs-on : macos-latest steps : - uses : actions/checkout@v3 - name : Run tests run : | xcodebuild test \\ -project DinoDB.xcodeproj \\ -scheme DinoDB \\ -enableCodeCoverage YES Quality Gates \u00b6 All tests must pass Code coverage >90% for new code Performance benchmarks met No memory leaks detected Security tests pass Debugging Tests \u00b6 Common Issues \u00b6 Async Test Failures : Use proper async/await patterns UI Test Flakiness : Add explicit waits Memory Leaks : Check retain cycles Mock Setup : Verify mock configurations Debug Tools \u00b6 Test Logs : Detailed test execution logs Memory Graph : Visual memory analysis Time Profiler : Performance bottleneck identification Network Profiler : API call analysis This is a stub - full documentation will be generated from project source","title":"Testing Guide"},{"location":"development/testing/#testing-guide","text":"Comprehensive testing strategy and guidelines for DinoDB.","title":"Testing Guide"},{"location":"development/testing/#testing-framework","text":"","title":"Testing Framework"},{"location":"development/testing/#swift-testing-framework","text":"DinoDB uses the modern Swift Testing framework (Swift 6 compatible): - Structured Testing : Clear test organization - Async Support : Built-in async/await testing - Parameterized Tests : Data-driven testing - Custom Expectations : Tailored assertions","title":"Swift Testing Framework"},{"location":"development/testing/#testing-philosophy","text":"Test-Driven Development : Write tests before implementation 90% Coverage Target : Comprehensive test coverage Fast Feedback : Quick test execution Reliable Tests : Deterministic and stable","title":"Testing Philosophy"},{"location":"development/testing/#test-structure","text":"","title":"Test Structure"},{"location":"development/testing/#directory-organization","text":"DinoDBTests/ \u251c\u2500\u2500 Unit/ \u2502 \u251c\u2500\u2500 Models/ \u2502 \u251c\u2500\u2500 Managers/ \u2502 \u2514\u2500\u2500 Utilities/ \u251c\u2500\u2500 Integration/ \u2502 \u251c\u2500\u2500 AWS/ \u2502 \u2514\u2500\u2500 DataFlow/ \u2514\u2500\u2500 UI/ \u251c\u2500\u2500 Views/ \u2514\u2500\u2500 Workflows/","title":"Directory Organization"},{"location":"development/testing/#test-categories","text":"","title":"Test Categories"},{"location":"development/testing/#unit-tests","text":"Models : SwiftData model validation Managers : Business logic testing Utilities : Helper function testing ViewModels : State management testing","title":"Unit Tests"},{"location":"development/testing/#integration-tests","text":"AWS Integration : DynamoDB operations Data Flow : End-to-end scenarios Authentication : Credential management Performance : Load and timing tests","title":"Integration Tests"},{"location":"development/testing/#ui-tests","text":"User Workflows : Complete user scenarios Navigation : View transitions Forms : Input validation Accessibility : Screen reader support","title":"UI Tests"},{"location":"development/testing/#running-tests","text":"","title":"Running Tests"},{"location":"development/testing/#command-line","text":"# Run all tests xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB # Run only unit tests xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBTests # Run with code coverage xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -enableCodeCoverage YES # Run specific test class xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB -only-testing:DinoDBTests/AccountModelTests","title":"Command Line"},{"location":"development/testing/#xcode-integration","text":"Test Navigator : Visual test management Test Reports : Detailed results and coverage Debugging : Breakpoints in tests Performance Testing : XCTMetric integration","title":"Xcode Integration"},{"location":"development/testing/#test-coverage","text":"","title":"Test Coverage"},{"location":"development/testing/#current-coverage","text":"\u2705 KeychainHelper : 95% coverage \u2705 Account Model : 90% coverage \u2705 DynamoDBManager : 85% coverage \ud83d\udd04 CloudWatchManager : 70% coverage (in progress) \u23f3 UI Components : 60% coverage (planned)","title":"Current Coverage"},{"location":"development/testing/#coverage-requirements","text":"New Code : 90% minimum coverage Critical Paths : 100% coverage Security Code : 100% coverage Error Handling : 95% coverage","title":"Coverage Requirements"},{"location":"development/testing/#coverage-tools","text":"# Generate coverage report xcodebuild test -project DinoDB.xcodeproj -scheme DinoDB \\ -enableCodeCoverage YES \\ -resultBundlePath TestResults.xcresult # View coverage in Xcode open TestResults.xcresult","title":"Coverage Tools"},{"location":"development/testing/#testing-patterns","text":"","title":"Testing Patterns"},{"location":"development/testing/#unit-test-example","text":"import Testing @ testable import DinoDB struct AccountModelTests { @ Test func testAccountCreation () async throws { // Given let account = Account ( name : \"Test Account\" , accessKeyId : \"AKIATEST\" , region : \"us-east-1\" ) // When let isValid = account . isValid // Then # expect ( isValid == true ) # expect ( account . name == \"Test Account\" ) } @ Test func testAccountValidation () async throws { // Given let invalidAccount = Account ( name : \"\" , accessKeyId : \"\" , region : \"\" ) // When/Then # expect ( invalidAccount . isValid == false ) } }","title":"Unit Test Example"},{"location":"development/testing/#integration-test-example","text":"struct DynamoDBManagerTests { @ Test func testListTables () async throws { // Given let mockCredentials = AWSCredentials ( accessKey : \"test\" , secretKey : \"test\" ) let manager = DynamoDBManager () // When let tables = try await manager . listTables ( credentials : mockCredentials ) // Then # expect ( tables . count >= 0 ) } }","title":"Integration Test Example"},{"location":"development/testing/#ui-test-example","text":"import XCTest final class DinoDBUITests : XCTestCase { func testAccountListNavigation () throws { let app = XCUIApplication () app . launch () // Test account list appears XCTAssertTrue ( app . staticTexts [ \"Accounts\" ]. exists ) // Test add account button app . buttons [ \"Add Account\" ]. tap () XCTAssertTrue ( app . navigationBars [ \"Add Account\" ]. exists ) } }","title":"UI Test Example"},{"location":"development/testing/#mocking-and-test-doubles","text":"","title":"Mocking and Test Doubles"},{"location":"development/testing/#aws-service-mocking","text":"protocol DynamoDBClientProtocol { func listTables () async throws -> [ String ] } class MockDynamoDBClient : DynamoDBClientProtocol { var mockTables : [ String ] = [] var shouldThrowError = false func listTables () async throws -> [ String ] { if shouldThrowError { throw AWSError . unauthorized } return mockTables } }","title":"AWS Service Mocking"},{"location":"development/testing/#swiftdata-mocking","text":"@ MainActor class TestModelContainer { static let shared : ModelContainer = { let schema = Schema ([ Account . self ]) let config = ModelConfiguration ( isStoredInMemoryOnly : true ) return try ! ModelContainer ( for : schema , configurations : [ config ]) }() }","title":"SwiftData Mocking"},{"location":"development/testing/#performance-testing","text":"","title":"Performance Testing"},{"location":"development/testing/#metrics-collection","text":"@ Test func testTableLoadPerformance () async throws { let startTime = CFAbsoluteTimeGetCurrent () // Perform operation let tables = try await dynamoDBManager . listTables () let timeElapsed = CFAbsoluteTimeGetCurrent () - startTime # expect ( timeElapsed < 2.0 ) // Should complete within 2 seconds }","title":"Metrics Collection"},{"location":"development/testing/#memory-testing","text":"@ Test func testMemoryUsage () async throws { let initialMemory = getMemoryUsage () // Perform memory-intensive operation try await loadLargeDataset () // Force garbage collection autoreleasepool {} let finalMemory = getMemoryUsage () # expect ( finalMemory - initialMemory < 50_000_000 ) // 50MB limit }","title":"Memory Testing"},{"location":"development/testing/#test-data-management","text":"","title":"Test Data Management"},{"location":"development/testing/#test-fixtures","text":"struct TestData { static let sampleAccount = Account ( name : \"Test Account\" , accessKeyId : \"AKIATEST123\" , region : \"us-east-1\" ) static let sampleTables = [ \"Users\" , \"Products\" , \"Orders\" ] static let sampleItem : [ String : Any ] = [ \"id\" : \"123\" , \"name\" : \"Test Item\" , \"created\" : Date () ] }","title":"Test Fixtures"},{"location":"development/testing/#database-seeding","text":"@ MainActor class DatabaseSeeder { static func seedTestData ( context : ModelContext ) { let accounts = [ TestData . sampleAccount , Account ( name : \"Prod Account\" , accessKeyId : \"AKIAPROD\" , region : \"us-west-2\" ) ] accounts . forEach { context . insert ( $0 ) } try ! context . save () } }","title":"Database Seeding"},{"location":"development/testing/#continuous-integration","text":"","title":"Continuous Integration"},{"location":"development/testing/#github-actions","text":"name : Tests on : [ push , pull_request ] jobs : test : runs-on : macos-latest steps : - uses : actions/checkout@v3 - name : Run tests run : | xcodebuild test \\ -project DinoDB.xcodeproj \\ -scheme DinoDB \\ -enableCodeCoverage YES","title":"GitHub Actions"},{"location":"development/testing/#quality-gates","text":"All tests must pass Code coverage >90% for new code Performance benchmarks met No memory leaks detected Security tests pass","title":"Quality Gates"},{"location":"development/testing/#debugging-tests","text":"","title":"Debugging Tests"},{"location":"development/testing/#common-issues","text":"Async Test Failures : Use proper async/await patterns UI Test Flakiness : Add explicit waits Memory Leaks : Check retain cycles Mock Setup : Verify mock configurations","title":"Common Issues"},{"location":"development/testing/#debug-tools","text":"Test Logs : Detailed test execution logs Memory Graph : Visual memory analysis Time Profiler : Performance bottleneck identification Network Profiler : API call analysis This is a stub - full documentation will be generated from project source","title":"Debug Tools"},{"location":"getting-started/installation/","text":"Installation \u00b6 System Requirements \u00b6 macOS : 14.0 (Sonoma) or later Architecture : Intel or Apple Silicon (M1/M2/M3) RAM : 4GB minimum, 8GB recommended Storage : 100MB free space Download Options \u00b6 Option 1: Direct Download (Recommended) \u00b6 Visit dinodb.app Click \"Download for macOS\" Open the downloaded DMG file Drag DinoDB to your Applications folder Option 2: GitHub Releases \u00b6 Go to GitHub Releases Download the latest DinoDB.dmg file Follow the same installation steps as above First Launch \u00b6 Open DinoDB from Applications folder If you see a security warning: Go to System Settings > Privacy & Security Click \"Open Anyway\" next to the DinoDB warning Confirm by clicking \"Open\" in the dialog AWS Prerequisites \u00b6 Before using DinoDB, ensure you have: AWS Account \u00b6 Active AWS account with DynamoDB access IAM user or role with appropriate permissions Required AWS Permissions \u00b6 { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"dynamodb:ListTables\" , \"dynamodb:DescribeTable\" , \"dynamodb:Scan\" , \"dynamodb:Query\" , \"dynamodb:GetItem\" , \"dynamodb:PutItem\" , \"dynamodb:UpdateItem\" , \"dynamodb:DeleteItem\" , \"dynamodb:CreateTable\" , \"dynamodb:DeleteTable\" , \"cloudwatch:GetMetricStatistics\" , \"cloudwatch:ListMetrics\" ], \"Resource\" : \"*\" } ] } AWS Credentials Setup \u00b6 Choose one of these methods: Method 1: AWS Credentials File \u00b6 Create ~/.aws/credentials with: [default] aws_access_key_id = YOUR_ACCESS_KEY aws_secret_access_key = YOUR_SECRET_KEY region = us-east-1 [production] aws_access_key_id = PROD_ACCESS_KEY aws_secret_access_key = PROD_SECRET_KEY region = us-west-2 Method 2: DinoDB Account Storage \u00b6 Add accounts directly in DinoDB (stored securely in Keychain): 1. Launch DinoDB 2. Click \"Add Account\" 3. Enter your AWS credentials 4. Click \"Save\" Verification \u00b6 After installation: Launch DinoDB You should see either: Your AWS profiles (if using credentials file) Welcome screen to add accounts Double-click an account to connect Verify you can see your DynamoDB tables Troubleshooting \u00b6 \"App can't be opened\" Error \u00b6 Check that you have macOS 14.0 or later Try the security override steps above No Tables Showing \u00b6 Verify AWS credentials have correct permissions Check that you're in the correct AWS region Ensure tables exist in your AWS account Connection Issues \u00b6 Verify internet connectivity Check AWS service status Confirm credentials are not expired Next Steps \u00b6 Once installed, continue to the Quick Start Guide to begin using DinoDB.","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#system-requirements","text":"macOS : 14.0 (Sonoma) or later Architecture : Intel or Apple Silicon (M1/M2/M3) RAM : 4GB minimum, 8GB recommended Storage : 100MB free space","title":"System Requirements"},{"location":"getting-started/installation/#download-options","text":"","title":"Download Options"},{"location":"getting-started/installation/#option-1-direct-download-recommended","text":"Visit dinodb.app Click \"Download for macOS\" Open the downloaded DMG file Drag DinoDB to your Applications folder","title":"Option 1: Direct Download (Recommended)"},{"location":"getting-started/installation/#option-2-github-releases","text":"Go to GitHub Releases Download the latest DinoDB.dmg file Follow the same installation steps as above","title":"Option 2: GitHub Releases"},{"location":"getting-started/installation/#first-launch","text":"Open DinoDB from Applications folder If you see a security warning: Go to System Settings > Privacy & Security Click \"Open Anyway\" next to the DinoDB warning Confirm by clicking \"Open\" in the dialog","title":"First Launch"},{"location":"getting-started/installation/#aws-prerequisites","text":"Before using DinoDB, ensure you have:","title":"AWS Prerequisites"},{"location":"getting-started/installation/#aws-account","text":"Active AWS account with DynamoDB access IAM user or role with appropriate permissions","title":"AWS Account"},{"location":"getting-started/installation/#required-aws-permissions","text":"{ \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"dynamodb:ListTables\" , \"dynamodb:DescribeTable\" , \"dynamodb:Scan\" , \"dynamodb:Query\" , \"dynamodb:GetItem\" , \"dynamodb:PutItem\" , \"dynamodb:UpdateItem\" , \"dynamodb:DeleteItem\" , \"dynamodb:CreateTable\" , \"dynamodb:DeleteTable\" , \"cloudwatch:GetMetricStatistics\" , \"cloudwatch:ListMetrics\" ], \"Resource\" : \"*\" } ] }","title":"Required AWS Permissions"},{"location":"getting-started/installation/#aws-credentials-setup","text":"Choose one of these methods:","title":"AWS Credentials Setup"},{"location":"getting-started/installation/#method-1-aws-credentials-file","text":"Create ~/.aws/credentials with: [default] aws_access_key_id = YOUR_ACCESS_KEY aws_secret_access_key = YOUR_SECRET_KEY region = us-east-1 [production] aws_access_key_id = PROD_ACCESS_KEY aws_secret_access_key = PROD_SECRET_KEY region = us-west-2","title":"Method 1: AWS Credentials File"},{"location":"getting-started/installation/#method-2-dinodb-account-storage","text":"Add accounts directly in DinoDB (stored securely in Keychain): 1. Launch DinoDB 2. Click \"Add Account\" 3. Enter your AWS credentials 4. Click \"Save\"","title":"Method 2: DinoDB Account Storage"},{"location":"getting-started/installation/#verification","text":"After installation: Launch DinoDB You should see either: Your AWS profiles (if using credentials file) Welcome screen to add accounts Double-click an account to connect Verify you can see your DynamoDB tables","title":"Verification"},{"location":"getting-started/installation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"getting-started/installation/#app-cant-be-opened-error","text":"Check that you have macOS 14.0 or later Try the security override steps above","title":"\"App can't be opened\" Error"},{"location":"getting-started/installation/#no-tables-showing","text":"Verify AWS credentials have correct permissions Check that you're in the correct AWS region Ensure tables exist in your AWS account","title":"No Tables Showing"},{"location":"getting-started/installation/#connection-issues","text":"Verify internet connectivity Check AWS service status Confirm credentials are not expired","title":"Connection Issues"},{"location":"getting-started/installation/#next-steps","text":"Once installed, continue to the Quick Start Guide to begin using DinoDB.","title":"Next Steps"},{"location":"getting-started/overview/","text":"Overview \u00b6 DinoDB is a native macOS application designed to make working with AWS DynamoDB tables intuitive and efficient. Whether you're a developer, DevOps engineer, or data analyst, DinoDB provides the tools you need to manage your DynamoDB infrastructure. Why DinoDB? \u00b6 Native macOS Experience \u00b6 Built specifically for macOS using SwiftUI, DinoDB feels at home on your Mac with: - Native look and feel following macOS Human Interface Guidelines - System integration with Keychain for secure credential storage - Responsive design that adapts to your workspace Enterprise-Ready Security \u00b6 Secure credential storage in macOS Keychain Support for AWS credentials file integration No credentials ever logged or stored in plain text Multiple account management with visual distinction Real-Time Monitoring \u00b6 CloudWatch integration for performance metrics Interactive charts with multiple time ranges Configurable metric alerts with system notifications Trend analysis and capacity monitoring Developer-Friendly \u00b6 Comprehensive debug logging system JSON syntax highlighting Query builder with visual interface Multiple view modes (Table and JSON) Architecture \u00b6 DinoDB is built using modern Swift technologies: SwiftUI : Declarative UI framework for native macOS interface SwiftData : Model persistence and account management AWS SDK for Swift : Official AWS integration Charts Framework : Native metric visualization Keychain Services : Secure credential storage Target Users \u00b6 Developers : Debug and test DynamoDB applications DevOps Engineers : Monitor table performance and capacity Data Analysts : Query and analyze DynamoDB data System Administrators : Manage multiple AWS accounts and regions","title":"Overview"},{"location":"getting-started/overview/#overview","text":"DinoDB is a native macOS application designed to make working with AWS DynamoDB tables intuitive and efficient. Whether you're a developer, DevOps engineer, or data analyst, DinoDB provides the tools you need to manage your DynamoDB infrastructure.","title":"Overview"},{"location":"getting-started/overview/#why-dinodb","text":"","title":"Why DinoDB?"},{"location":"getting-started/overview/#native-macos-experience","text":"Built specifically for macOS using SwiftUI, DinoDB feels at home on your Mac with: - Native look and feel following macOS Human Interface Guidelines - System integration with Keychain for secure credential storage - Responsive design that adapts to your workspace","title":"Native macOS Experience"},{"location":"getting-started/overview/#enterprise-ready-security","text":"Secure credential storage in macOS Keychain Support for AWS credentials file integration No credentials ever logged or stored in plain text Multiple account management with visual distinction","title":"Enterprise-Ready Security"},{"location":"getting-started/overview/#real-time-monitoring","text":"CloudWatch integration for performance metrics Interactive charts with multiple time ranges Configurable metric alerts with system notifications Trend analysis and capacity monitoring","title":"Real-Time Monitoring"},{"location":"getting-started/overview/#developer-friendly","text":"Comprehensive debug logging system JSON syntax highlighting Query builder with visual interface Multiple view modes (Table and JSON)","title":"Developer-Friendly"},{"location":"getting-started/overview/#architecture","text":"DinoDB is built using modern Swift technologies: SwiftUI : Declarative UI framework for native macOS interface SwiftData : Model persistence and account management AWS SDK for Swift : Official AWS integration Charts Framework : Native metric visualization Keychain Services : Secure credential storage","title":"Architecture"},{"location":"getting-started/overview/#target-users","text":"Developers : Debug and test DynamoDB applications DevOps Engineers : Monitor table performance and capacity Data Analysts : Query and analyze DynamoDB data System Administrators : Manage multiple AWS accounts and regions","title":"Target Users"},{"location":"getting-started/quickstart/","text":"Quick Start \u00b6 Get up and running with DinoDB in just a few minutes. Step 1: Add Your First AWS Account \u00b6 Using AWS Credentials File \u00b6 If you have ~/.aws/credentials configured: 1. Launch DinoDB 2. Your AWS profiles will appear automatically 3. Double-click a profile to connect Manual Account Setup \u00b6 Click \"Add Account\" Fill in the form: Name : \"My AWS Account\" Access Key ID : Your AWS access key Secret Access Key : Your AWS secret key Region : Your preferred region (e.g., us-east-1) Tags : Optional labels (e.g., \"production\", \"development\") Click \"Save\" Step 2: Connect to Your Account \u00b6 Double-click your account card Wait for the connection to establish You'll see your DynamoDB tables in the sidebar Step 3: Browse Your Tables \u00b6 Table List View \u00b6 Tables appear in the left sidebar Click any table to view its data Use the search box to filter tables Star tables to mark as favorites Table Data View \u00b6 Table View : Spreadsheet-like interface JSON View : Raw DynamoDB JSON format Pagination : Navigate through large datasets Sorting : Click column headers to sort Step 4: Perform Basic Operations \u00b6 View Items \u00b6 Select a table from the sidebar Browse items in the main view Click any item to see details Add New Item \u00b6 Click \"Add Item\" button Use the JSON editor or form fields Click \"Save\" to create the item Edit Existing Item \u00b6 Double-click an item in the table Modify values in the detail view Click \"Save Changes\" Delete Item \u00b6 Select an item Press Delete key or right-click > Delete Confirm the deletion Step 5: Explore Advanced Features \u00b6 Query Builder \u00b6 Click \"Query\" in the toolbar Select your partition key Add conditions for sort keys Click \"Run Query\" Monitoring Dashboard \u00b6 Select a table Click the \"Metrics\" tab View real-time CloudWatch metrics Set up alerts for important thresholds Settings & Preferences \u00b6 Click the gear icon in the toolbar Customize: Theme (Light/Dark/System) Default page sizes Auto-refresh intervals Keyboard shortcuts Common Tasks \u00b6 Switching Between Accounts \u00b6 Click different account cards to switch contexts Each account maintains its own connection state Visual indicators show active connections Managing Multiple Regions \u00b6 Add separate accounts for different regions Or edit account settings to change regions Tables will refresh automatically Keyboard Shortcuts \u00b6 \u2318N : Add new item \u2318R : Refresh tables \u2318F : Focus search Delete : Delete selected item \u2318, : Open settings Tips for Success \u00b6 Performance Use pagination for large tables Set appropriate page sizes in settings Use queries instead of scans when possible Security Never share AWS credentials Use IAM roles with minimal required permissions Regularly rotate access keys Monitoring Set up CloudWatch alerts for important metrics Monitor capacity utilization regularly Watch for throttling events Next Steps \u00b6 Now that you're familiar with the basics: Read the User Guide for detailed features Learn about Account Management Explore Advanced Querying Set up Monitoring & Alerts","title":"Quick Start"},{"location":"getting-started/quickstart/#quick-start","text":"Get up and running with DinoDB in just a few minutes.","title":"Quick Start"},{"location":"getting-started/quickstart/#step-1-add-your-first-aws-account","text":"","title":"Step 1: Add Your First AWS Account"},{"location":"getting-started/quickstart/#using-aws-credentials-file","text":"If you have ~/.aws/credentials configured: 1. Launch DinoDB 2. Your AWS profiles will appear automatically 3. Double-click a profile to connect","title":"Using AWS Credentials File"},{"location":"getting-started/quickstart/#manual-account-setup","text":"Click \"Add Account\" Fill in the form: Name : \"My AWS Account\" Access Key ID : Your AWS access key Secret Access Key : Your AWS secret key Region : Your preferred region (e.g., us-east-1) Tags : Optional labels (e.g., \"production\", \"development\") Click \"Save\"","title":"Manual Account Setup"},{"location":"getting-started/quickstart/#step-2-connect-to-your-account","text":"Double-click your account card Wait for the connection to establish You'll see your DynamoDB tables in the sidebar","title":"Step 2: Connect to Your Account"},{"location":"getting-started/quickstart/#step-3-browse-your-tables","text":"","title":"Step 3: Browse Your Tables"},{"location":"getting-started/quickstart/#table-list-view","text":"Tables appear in the left sidebar Click any table to view its data Use the search box to filter tables Star tables to mark as favorites","title":"Table List View"},{"location":"getting-started/quickstart/#table-data-view","text":"Table View : Spreadsheet-like interface JSON View : Raw DynamoDB JSON format Pagination : Navigate through large datasets Sorting : Click column headers to sort","title":"Table Data View"},{"location":"getting-started/quickstart/#step-4-perform-basic-operations","text":"","title":"Step 4: Perform Basic Operations"},{"location":"getting-started/quickstart/#view-items","text":"Select a table from the sidebar Browse items in the main view Click any item to see details","title":"View Items"},{"location":"getting-started/quickstart/#add-new-item","text":"Click \"Add Item\" button Use the JSON editor or form fields Click \"Save\" to create the item","title":"Add New Item"},{"location":"getting-started/quickstart/#edit-existing-item","text":"Double-click an item in the table Modify values in the detail view Click \"Save Changes\"","title":"Edit Existing Item"},{"location":"getting-started/quickstart/#delete-item","text":"Select an item Press Delete key or right-click > Delete Confirm the deletion","title":"Delete Item"},{"location":"getting-started/quickstart/#step-5-explore-advanced-features","text":"","title":"Step 5: Explore Advanced Features"},{"location":"getting-started/quickstart/#query-builder","text":"Click \"Query\" in the toolbar Select your partition key Add conditions for sort keys Click \"Run Query\"","title":"Query Builder"},{"location":"getting-started/quickstart/#monitoring-dashboard","text":"Select a table Click the \"Metrics\" tab View real-time CloudWatch metrics Set up alerts for important thresholds","title":"Monitoring Dashboard"},{"location":"getting-started/quickstart/#settings-preferences","text":"Click the gear icon in the toolbar Customize: Theme (Light/Dark/System) Default page sizes Auto-refresh intervals Keyboard shortcuts","title":"Settings &amp; Preferences"},{"location":"getting-started/quickstart/#common-tasks","text":"","title":"Common Tasks"},{"location":"getting-started/quickstart/#switching-between-accounts","text":"Click different account cards to switch contexts Each account maintains its own connection state Visual indicators show active connections","title":"Switching Between Accounts"},{"location":"getting-started/quickstart/#managing-multiple-regions","text":"Add separate accounts for different regions Or edit account settings to change regions Tables will refresh automatically","title":"Managing Multiple Regions"},{"location":"getting-started/quickstart/#keyboard-shortcuts","text":"\u2318N : Add new item \u2318R : Refresh tables \u2318F : Focus search Delete : Delete selected item \u2318, : Open settings","title":"Keyboard Shortcuts"},{"location":"getting-started/quickstart/#tips-for-success","text":"Performance Use pagination for large tables Set appropriate page sizes in settings Use queries instead of scans when possible Security Never share AWS credentials Use IAM roles with minimal required permissions Regularly rotate access keys Monitoring Set up CloudWatch alerts for important metrics Monitor capacity utilization regularly Watch for throttling events","title":"Tips for Success"},{"location":"getting-started/quickstart/#next-steps","text":"Now that you're familiar with the basics: Read the User Guide for detailed features Learn about Account Management Explore Advanced Querying Set up Monitoring & Alerts","title":"Next Steps"},{"location":"user-guide/account-management/","text":"Account Management \u00b6 Comprehensive guide to managing AWS accounts in DinoDB. Overview \u00b6 DinoDB supports two types of account storage: - AWS Profiles : Read from ~/.aws/credentials (read-only) - Stored Accounts : Saved in DinoDB with Keychain security AWS Credentials File Integration \u00b6 Automatic Discovery \u00b6 DinoDB automatically discovers accounts from your AWS credentials file at ~/.aws/credentials . Visual Distinction \u00b6 AWS profiles show a document icon Cannot be edited or deleted from DinoDB Automatically reload when credentials file changes Supported Format \u00b6 [default] aws_access_key_id = YOUR_ACCESS_KEY aws_secret_access_key = YOUR_SECRET_KEY region = us-east-1 [production] aws_access_key_id = PROD_ACCESS_KEY aws_secret_access_key = PROD_SECRET_KEY region = us-west-2 Adding Accounts \u00b6 Manual Account Creation \u00b6 Click \"Add Account\" button Complete the form: Name : Descriptive account name Access Key ID : AWS access key Secret Access Key : AWS secret key Region : Default AWS region Description : Optional account description Tags : Categorization labels Click \"Save\" Security Features \u00b6 Credentials stored in macOS Keychain Never logged or stored in plain text Secure access with app-specific permissions Managing Accounts \u00b6 Account Actions \u00b6 Double-click : Connect to account Right-click : Context menu with actions Edit : Modify account details (stored accounts only) Delete : Remove account (stored accounts only) Connection Status \u00b6 Connected : Blue outline border Disconnected : Gray border Error : Red border with error details Bulk Operations \u00b6 Reload All : Refresh AWS profiles from file Disconnect All : Close all active connections Account Details \u00b6 Metadata Display \u00b6 Each account card shows: - Account name and description - AWS region and tags - Connection status - Creation date (for stored accounts) - Profile source (AWS file vs. stored) Rich Tagging System \u00b6 Color-coded tag backgrounds Filtering by tags Quick identification of account types Best Practices \u00b6 Security \u00b6 Use IAM users with minimal required permissions Regularly rotate access keys Never commit credentials to version control Use separate accounts for different environments Organization \u00b6 Use descriptive account names Tag accounts by environment (prod, dev, staging) Group related accounts together Include region information in names Performance \u00b6 Limit concurrent connections Use regional accounts when possible Monitor CloudWatch costs Troubleshooting \u00b6 Common Issues \u00b6 No tables showing : Check IAM permissions Connection timeout : Verify network and credentials Profile not appearing : Check credentials file format Debug Information \u00b6 Access debug logs for detailed connection information and error diagnosis. This is a stub - full documentation will be generated from project source","title":"Account Management"},{"location":"user-guide/account-management/#account-management","text":"Comprehensive guide to managing AWS accounts in DinoDB.","title":"Account Management"},{"location":"user-guide/account-management/#overview","text":"DinoDB supports two types of account storage: - AWS Profiles : Read from ~/.aws/credentials (read-only) - Stored Accounts : Saved in DinoDB with Keychain security","title":"Overview"},{"location":"user-guide/account-management/#aws-credentials-file-integration","text":"","title":"AWS Credentials File Integration"},{"location":"user-guide/account-management/#automatic-discovery","text":"DinoDB automatically discovers accounts from your AWS credentials file at ~/.aws/credentials .","title":"Automatic Discovery"},{"location":"user-guide/account-management/#visual-distinction","text":"AWS profiles show a document icon Cannot be edited or deleted from DinoDB Automatically reload when credentials file changes","title":"Visual Distinction"},{"location":"user-guide/account-management/#supported-format","text":"[default] aws_access_key_id = YOUR_ACCESS_KEY aws_secret_access_key = YOUR_SECRET_KEY region = us-east-1 [production] aws_access_key_id = PROD_ACCESS_KEY aws_secret_access_key = PROD_SECRET_KEY region = us-west-2","title":"Supported Format"},{"location":"user-guide/account-management/#adding-accounts","text":"","title":"Adding Accounts"},{"location":"user-guide/account-management/#manual-account-creation","text":"Click \"Add Account\" button Complete the form: Name : Descriptive account name Access Key ID : AWS access key Secret Access Key : AWS secret key Region : Default AWS region Description : Optional account description Tags : Categorization labels Click \"Save\"","title":"Manual Account Creation"},{"location":"user-guide/account-management/#security-features","text":"Credentials stored in macOS Keychain Never logged or stored in plain text Secure access with app-specific permissions","title":"Security Features"},{"location":"user-guide/account-management/#managing-accounts","text":"","title":"Managing Accounts"},{"location":"user-guide/account-management/#account-actions","text":"Double-click : Connect to account Right-click : Context menu with actions Edit : Modify account details (stored accounts only) Delete : Remove account (stored accounts only)","title":"Account Actions"},{"location":"user-guide/account-management/#connection-status","text":"Connected : Blue outline border Disconnected : Gray border Error : Red border with error details","title":"Connection Status"},{"location":"user-guide/account-management/#bulk-operations","text":"Reload All : Refresh AWS profiles from file Disconnect All : Close all active connections","title":"Bulk Operations"},{"location":"user-guide/account-management/#account-details","text":"","title":"Account Details"},{"location":"user-guide/account-management/#metadata-display","text":"Each account card shows: - Account name and description - AWS region and tags - Connection status - Creation date (for stored accounts) - Profile source (AWS file vs. stored)","title":"Metadata Display"},{"location":"user-guide/account-management/#rich-tagging-system","text":"Color-coded tag backgrounds Filtering by tags Quick identification of account types","title":"Rich Tagging System"},{"location":"user-guide/account-management/#best-practices","text":"","title":"Best Practices"},{"location":"user-guide/account-management/#security","text":"Use IAM users with minimal required permissions Regularly rotate access keys Never commit credentials to version control Use separate accounts for different environments","title":"Security"},{"location":"user-guide/account-management/#organization","text":"Use descriptive account names Tag accounts by environment (prod, dev, staging) Group related accounts together Include region information in names","title":"Organization"},{"location":"user-guide/account-management/#performance","text":"Limit concurrent connections Use regional accounts when possible Monitor CloudWatch costs","title":"Performance"},{"location":"user-guide/account-management/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"user-guide/account-management/#common-issues","text":"No tables showing : Check IAM permissions Connection timeout : Verify network and credentials Profile not appearing : Check credentials file format","title":"Common Issues"},{"location":"user-guide/account-management/#debug-information","text":"Access debug logs for detailed connection information and error diagnosis. This is a stub - full documentation will be generated from project source","title":"Debug Information"},{"location":"user-guide/monitoring/","text":"Monitoring & Metrics \u00b6 Real-time monitoring and alerting system integrated with AWS CloudWatch. CloudWatch Integration \u00b6 Metrics Dashboard \u00b6 Real-time performance metrics Interactive charts using native SwiftUI Charts Multiple time ranges (1h, 6h, 24h, 7d) Automatic refresh every 60 seconds Supported Metrics \u00b6 Capacity Metrics : Read/Write capacity utilization Performance Metrics : Latency, throttling events Error Metrics : User errors, system errors Storage Metrics : Item count, table size Interactive Charts \u00b6 Chart Types \u00b6 Line charts for trend analysis Area charts for cumulative metrics Bar charts for discrete events Combo charts for correlated metrics Chart Features \u00b6 Zoom and pan capabilities Data point hover information Export to image formats Time range selection Visual Indicators \u00b6 Trend arrows with color coding Threshold breach highlights Performance status badges Capacity utilization warnings Metric Alerts \u00b6 Alert Configuration \u00b6 Configurable thresholds for all metrics Multiple severity levels (Info, Warning, Critical) Custom alert names and descriptions Flexible time windows Alert Types \u00b6 Threshold Alerts : Trigger when metric exceeds limit Trend Alerts : Detect unusual patterns Composite Alerts : Multiple condition combinations Anomaly Detection : Machine learning-based alerts Notification System \u00b6 Native macOS notifications Visual alert banners in dashboard Alert history and acknowledgment Escalation procedures Performance Monitoring \u00b6 Capacity Tracking \u00b6 Read/write capacity utilization Auto-scaling recommendations Cost optimization suggestions Burst capacity monitoring Latency Analysis \u00b6 Request latency percentiles Regional latency comparison Operation-type breakdown Historical trend analysis Error Monitoring \u00b6 Error rate tracking Error type categorization Root cause analysis hints Recovery recommendations Alert Management \u00b6 Alert Dashboard \u00b6 Active alerts overview Alert severity distribution Recent alert history Acknowledgment status Alert Actions \u00b6 Acknowledge alerts Snooze notifications Edit alert thresholds Disable/enable alerts Alert History \u00b6 Complete alert timeline Resolution tracking Performance impact correlation Trend analysis Monitoring Best Practices \u00b6 Threshold Setting \u00b6 Start with conservative thresholds Adjust based on normal usage patterns Account for traffic spikes Consider business impact Alert Fatigue Prevention \u00b6 Use appropriate severity levels Implement alert suppression Group related alerts Regular threshold review Performance Optimization \u00b6 Monitor capacity trends Identify bottlenecks early Plan for growth Optimize query patterns Custom Dashboards \u00b6 Dashboard Creation \u00b6 Drag-and-drop metric selection Custom time ranges Layout customization Save and share dashboards Widget Types \u00b6 Single metric displays Comparison charts Status indicators Custom calculations This is a stub - full documentation will be generated from project source","title":"Monitoring & Metrics"},{"location":"user-guide/monitoring/#monitoring-metrics","text":"Real-time monitoring and alerting system integrated with AWS CloudWatch.","title":"Monitoring &amp; Metrics"},{"location":"user-guide/monitoring/#cloudwatch-integration","text":"","title":"CloudWatch Integration"},{"location":"user-guide/monitoring/#metrics-dashboard","text":"Real-time performance metrics Interactive charts using native SwiftUI Charts Multiple time ranges (1h, 6h, 24h, 7d) Automatic refresh every 60 seconds","title":"Metrics Dashboard"},{"location":"user-guide/monitoring/#supported-metrics","text":"Capacity Metrics : Read/Write capacity utilization Performance Metrics : Latency, throttling events Error Metrics : User errors, system errors Storage Metrics : Item count, table size","title":"Supported Metrics"},{"location":"user-guide/monitoring/#interactive-charts","text":"","title":"Interactive Charts"},{"location":"user-guide/monitoring/#chart-types","text":"Line charts for trend analysis Area charts for cumulative metrics Bar charts for discrete events Combo charts for correlated metrics","title":"Chart Types"},{"location":"user-guide/monitoring/#chart-features","text":"Zoom and pan capabilities Data point hover information Export to image formats Time range selection","title":"Chart Features"},{"location":"user-guide/monitoring/#visual-indicators","text":"Trend arrows with color coding Threshold breach highlights Performance status badges Capacity utilization warnings","title":"Visual Indicators"},{"location":"user-guide/monitoring/#metric-alerts","text":"","title":"Metric Alerts"},{"location":"user-guide/monitoring/#alert-configuration","text":"Configurable thresholds for all metrics Multiple severity levels (Info, Warning, Critical) Custom alert names and descriptions Flexible time windows","title":"Alert Configuration"},{"location":"user-guide/monitoring/#alert-types","text":"Threshold Alerts : Trigger when metric exceeds limit Trend Alerts : Detect unusual patterns Composite Alerts : Multiple condition combinations Anomaly Detection : Machine learning-based alerts","title":"Alert Types"},{"location":"user-guide/monitoring/#notification-system","text":"Native macOS notifications Visual alert banners in dashboard Alert history and acknowledgment Escalation procedures","title":"Notification System"},{"location":"user-guide/monitoring/#performance-monitoring","text":"","title":"Performance Monitoring"},{"location":"user-guide/monitoring/#capacity-tracking","text":"Read/write capacity utilization Auto-scaling recommendations Cost optimization suggestions Burst capacity monitoring","title":"Capacity Tracking"},{"location":"user-guide/monitoring/#latency-analysis","text":"Request latency percentiles Regional latency comparison Operation-type breakdown Historical trend analysis","title":"Latency Analysis"},{"location":"user-guide/monitoring/#error-monitoring","text":"Error rate tracking Error type categorization Root cause analysis hints Recovery recommendations","title":"Error Monitoring"},{"location":"user-guide/monitoring/#alert-management","text":"","title":"Alert Management"},{"location":"user-guide/monitoring/#alert-dashboard","text":"Active alerts overview Alert severity distribution Recent alert history Acknowledgment status","title":"Alert Dashboard"},{"location":"user-guide/monitoring/#alert-actions","text":"Acknowledge alerts Snooze notifications Edit alert thresholds Disable/enable alerts","title":"Alert Actions"},{"location":"user-guide/monitoring/#alert-history","text":"Complete alert timeline Resolution tracking Performance impact correlation Trend analysis","title":"Alert History"},{"location":"user-guide/monitoring/#monitoring-best-practices","text":"","title":"Monitoring Best Practices"},{"location":"user-guide/monitoring/#threshold-setting","text":"Start with conservative thresholds Adjust based on normal usage patterns Account for traffic spikes Consider business impact","title":"Threshold Setting"},{"location":"user-guide/monitoring/#alert-fatigue-prevention","text":"Use appropriate severity levels Implement alert suppression Group related alerts Regular threshold review","title":"Alert Fatigue Prevention"},{"location":"user-guide/monitoring/#performance-optimization","text":"Monitor capacity trends Identify bottlenecks early Plan for growth Optimize query patterns","title":"Performance Optimization"},{"location":"user-guide/monitoring/#custom-dashboards","text":"","title":"Custom Dashboards"},{"location":"user-guide/monitoring/#dashboard-creation","text":"Drag-and-drop metric selection Custom time ranges Layout customization Save and share dashboards","title":"Dashboard Creation"},{"location":"user-guide/monitoring/#widget-types","text":"Single metric displays Comparison charts Status indicators Custom calculations This is a stub - full documentation will be generated from project source","title":"Widget Types"},{"location":"user-guide/query-builder/","text":"Query Builder \u00b6 Visual interface for building complex DynamoDB queries without writing code. Overview \u00b6 The Query Builder provides an intuitive way to construct DynamoDB queries and scans through a visual interface, making it accessible to users who aren't familiar with DynamoDB's query syntax. Query Types \u00b6 Partition Key Queries \u00b6 Simple equality matching Required for all queries Efficient data retrieval Index-aware suggestions Sort Key Queries \u00b6 Range operations (>, <, >=, <=, between) Equality matching String prefix matching (begins_with) Combined with partition key queries Scan Operations \u00b6 Full table scans with filtering Parallel scan configuration Cost and performance warnings Progress tracking Filter Expressions \u00b6 Attribute Conditions \u00b6 Equality and inequality operators String operations (contains, begins_with) Numeric range queries Boolean and null checks Logical Operators \u00b6 AND/OR combinations Complex nested conditions Parentheses grouping Condition precedence Function Support \u00b6 size() for collection attributes attribute_exists() and attribute_not_exists() attribute_type() for type checking Custom function builder Visual Interface \u00b6 Drag-and-Drop Builder \u00b6 Visual condition blocks Connecting operators Real-time syntax validation Preview of generated expressions Attribute Explorer \u00b6 Schema-aware attribute suggestions Type information display Example values Index utilization hints Query Preview \u00b6 Generated DynamoDB expression Estimated cost and performance Result count predictions Execution plan visualization Index Selection \u00b6 Automatic Index Detection \u00b6 Global Secondary Index (GSI) suggestions Local Secondary Index (LSI) options Cost comparison between indexes Performance impact analysis Manual Index Override \u00b6 Force specific index usage Compare execution across indexes Index-specific limitations Capacity consumption estimates Advanced Features \u00b6 Projection Expressions \u00b6 Select specific attributes Reduce data transfer costs Nested attribute selection Expression validation Pagination Control \u00b6 Custom page sizes Bookmark-based pagination Parallel processing options Memory usage optimization Query Optimization \u00b6 Automatic query plan suggestions Cost optimization recommendations Performance bottleneck identification Alternative query strategies Saved Queries \u00b6 Query Templates \u00b6 Save frequently used queries Parameterized query templates Team sharing capabilities Version control for queries Query History \u00b6 Recently executed queries Performance metrics tracking Result caching Quick re-execution Best Practices \u00b6 Performance Guidelines \u00b6 Prefer queries over scans Use appropriate indexes Limit result set sizes Monitor capacity consumption Cost Optimization \u00b6 Projection expressions for large items Efficient filter conditions Batch operations when possible Read capacity planning Security Considerations \u00b6 Attribute-level access control Query logging and auditing Sensitive data handling Rate limiting compliance This is a stub - full documentation will be generated from project source","title":"Query Builder"},{"location":"user-guide/query-builder/#query-builder","text":"Visual interface for building complex DynamoDB queries without writing code.","title":"Query Builder"},{"location":"user-guide/query-builder/#overview","text":"The Query Builder provides an intuitive way to construct DynamoDB queries and scans through a visual interface, making it accessible to users who aren't familiar with DynamoDB's query syntax.","title":"Overview"},{"location":"user-guide/query-builder/#query-types","text":"","title":"Query Types"},{"location":"user-guide/query-builder/#partition-key-queries","text":"Simple equality matching Required for all queries Efficient data retrieval Index-aware suggestions","title":"Partition Key Queries"},{"location":"user-guide/query-builder/#sort-key-queries","text":"Range operations (>, <, >=, <=, between) Equality matching String prefix matching (begins_with) Combined with partition key queries","title":"Sort Key Queries"},{"location":"user-guide/query-builder/#scan-operations","text":"Full table scans with filtering Parallel scan configuration Cost and performance warnings Progress tracking","title":"Scan Operations"},{"location":"user-guide/query-builder/#filter-expressions","text":"","title":"Filter Expressions"},{"location":"user-guide/query-builder/#attribute-conditions","text":"Equality and inequality operators String operations (contains, begins_with) Numeric range queries Boolean and null checks","title":"Attribute Conditions"},{"location":"user-guide/query-builder/#logical-operators","text":"AND/OR combinations Complex nested conditions Parentheses grouping Condition precedence","title":"Logical Operators"},{"location":"user-guide/query-builder/#function-support","text":"size() for collection attributes attribute_exists() and attribute_not_exists() attribute_type() for type checking Custom function builder","title":"Function Support"},{"location":"user-guide/query-builder/#visual-interface","text":"","title":"Visual Interface"},{"location":"user-guide/query-builder/#drag-and-drop-builder","text":"Visual condition blocks Connecting operators Real-time syntax validation Preview of generated expressions","title":"Drag-and-Drop Builder"},{"location":"user-guide/query-builder/#attribute-explorer","text":"Schema-aware attribute suggestions Type information display Example values Index utilization hints","title":"Attribute Explorer"},{"location":"user-guide/query-builder/#query-preview","text":"Generated DynamoDB expression Estimated cost and performance Result count predictions Execution plan visualization","title":"Query Preview"},{"location":"user-guide/query-builder/#index-selection","text":"","title":"Index Selection"},{"location":"user-guide/query-builder/#automatic-index-detection","text":"Global Secondary Index (GSI) suggestions Local Secondary Index (LSI) options Cost comparison between indexes Performance impact analysis","title":"Automatic Index Detection"},{"location":"user-guide/query-builder/#manual-index-override","text":"Force specific index usage Compare execution across indexes Index-specific limitations Capacity consumption estimates","title":"Manual Index Override"},{"location":"user-guide/query-builder/#advanced-features","text":"","title":"Advanced Features"},{"location":"user-guide/query-builder/#projection-expressions","text":"Select specific attributes Reduce data transfer costs Nested attribute selection Expression validation","title":"Projection Expressions"},{"location":"user-guide/query-builder/#pagination-control","text":"Custom page sizes Bookmark-based pagination Parallel processing options Memory usage optimization","title":"Pagination Control"},{"location":"user-guide/query-builder/#query-optimization","text":"Automatic query plan suggestions Cost optimization recommendations Performance bottleneck identification Alternative query strategies","title":"Query Optimization"},{"location":"user-guide/query-builder/#saved-queries","text":"","title":"Saved Queries"},{"location":"user-guide/query-builder/#query-templates","text":"Save frequently used queries Parameterized query templates Team sharing capabilities Version control for queries","title":"Query Templates"},{"location":"user-guide/query-builder/#query-history","text":"Recently executed queries Performance metrics tracking Result caching Quick re-execution","title":"Query History"},{"location":"user-guide/query-builder/#best-practices","text":"","title":"Best Practices"},{"location":"user-guide/query-builder/#performance-guidelines","text":"Prefer queries over scans Use appropriate indexes Limit result set sizes Monitor capacity consumption","title":"Performance Guidelines"},{"location":"user-guide/query-builder/#cost-optimization","text":"Projection expressions for large items Efficient filter conditions Batch operations when possible Read capacity planning","title":"Cost Optimization"},{"location":"user-guide/query-builder/#security-considerations","text":"Attribute-level access control Query logging and auditing Sensitive data handling Rate limiting compliance This is a stub - full documentation will be generated from project source","title":"Security Considerations"},{"location":"user-guide/table-operations/","text":"Table Operations \u00b6 Complete guide to working with DynamoDB tables in DinoDB. Table List Views \u00b6 Sidebar Mode \u00b6 Condensed table list in left sidebar Quick table switching Search and filter capabilities Favorites system Full Table View \u00b6 Expanded table list with details Table metadata preview Bulk operations support Viewing Table Data \u00b6 Display Modes \u00b6 Table View \u00b6 Spreadsheet-like interface Sortable columns Inline editing capabilities Row selection and bulk operations JSON View \u00b6 Raw DynamoDB JSON format Syntax highlighting Copy/paste functionality Schema validation Pagination Controls \u00b6 Configurable page sizes (10, 25, 50, 100, 250) Forward/backward navigation Jump to specific pages Total item count display CRUD Operations \u00b6 Creating Items \u00b6 Click \"Add Item\" button Choose input method: Form builder with field validation Direct JSON editor Set attribute types and values Validate and save Reading Items \u00b6 Browse with pagination Search and filter capabilities Export to various formats Item detail views with full attribute display Updating Items \u00b6 Double-click item to open detail view Edit attributes in-place Validate changes Save with confirmation Deleting Items \u00b6 Single item deletion Bulk delete operations Confirmation dialogs Undo capabilities (where supported) Query Operations \u00b6 Simple Queries \u00b6 Partition key filtering Sort key range queries Attribute-based filtering Index utilization Advanced Queries \u00b6 Complex filter expressions Projection expressions Conditional operations Cross-table queries Table Management \u00b6 Table Information \u00b6 Schema details and key structure Capacity and billing information Index configuration Stream settings Table Creation \u00b6 Guided table creation wizard Schema design assistance Capacity planning tools Best practice recommendations Table Modification \u00b6 Index management Capacity adjustments Stream configuration Tag management Performance Features \u00b6 Optimization Tools \u00b6 Query performance analysis Scan vs. query recommendations Index usage optimization Cost estimation Monitoring Integration \u00b6 Real-time performance metrics Capacity utilization tracking Error rate monitoring Latency analysis Data Export/Import \u00b6 Export Formats \u00b6 JSON CSV DynamoDB JSON format Custom templates Import Capabilities \u00b6 Bulk data import Schema validation Error handling and reporting Progress tracking This is a stub - full documentation will be generated from project source","title":"Table Operations"},{"location":"user-guide/table-operations/#table-operations","text":"Complete guide to working with DynamoDB tables in DinoDB.","title":"Table Operations"},{"location":"user-guide/table-operations/#table-list-views","text":"","title":"Table List Views"},{"location":"user-guide/table-operations/#sidebar-mode","text":"Condensed table list in left sidebar Quick table switching Search and filter capabilities Favorites system","title":"Sidebar Mode"},{"location":"user-guide/table-operations/#full-table-view","text":"Expanded table list with details Table metadata preview Bulk operations support","title":"Full Table View"},{"location":"user-guide/table-operations/#viewing-table-data","text":"","title":"Viewing Table Data"},{"location":"user-guide/table-operations/#display-modes","text":"","title":"Display Modes"},{"location":"user-guide/table-operations/#table-view","text":"Spreadsheet-like interface Sortable columns Inline editing capabilities Row selection and bulk operations","title":"Table View"},{"location":"user-guide/table-operations/#json-view","text":"Raw DynamoDB JSON format Syntax highlighting Copy/paste functionality Schema validation","title":"JSON View"},{"location":"user-guide/table-operations/#pagination-controls","text":"Configurable page sizes (10, 25, 50, 100, 250) Forward/backward navigation Jump to specific pages Total item count display","title":"Pagination Controls"},{"location":"user-guide/table-operations/#crud-operations","text":"","title":"CRUD Operations"},{"location":"user-guide/table-operations/#creating-items","text":"Click \"Add Item\" button Choose input method: Form builder with field validation Direct JSON editor Set attribute types and values Validate and save","title":"Creating Items"},{"location":"user-guide/table-operations/#reading-items","text":"Browse with pagination Search and filter capabilities Export to various formats Item detail views with full attribute display","title":"Reading Items"},{"location":"user-guide/table-operations/#updating-items","text":"Double-click item to open detail view Edit attributes in-place Validate changes Save with confirmation","title":"Updating Items"},{"location":"user-guide/table-operations/#deleting-items","text":"Single item deletion Bulk delete operations Confirmation dialogs Undo capabilities (where supported)","title":"Deleting Items"},{"location":"user-guide/table-operations/#query-operations","text":"","title":"Query Operations"},{"location":"user-guide/table-operations/#simple-queries","text":"Partition key filtering Sort key range queries Attribute-based filtering Index utilization","title":"Simple Queries"},{"location":"user-guide/table-operations/#advanced-queries","text":"Complex filter expressions Projection expressions Conditional operations Cross-table queries","title":"Advanced Queries"},{"location":"user-guide/table-operations/#table-management","text":"","title":"Table Management"},{"location":"user-guide/table-operations/#table-information","text":"Schema details and key structure Capacity and billing information Index configuration Stream settings","title":"Table Information"},{"location":"user-guide/table-operations/#table-creation","text":"Guided table creation wizard Schema design assistance Capacity planning tools Best practice recommendations","title":"Table Creation"},{"location":"user-guide/table-operations/#table-modification","text":"Index management Capacity adjustments Stream configuration Tag management","title":"Table Modification"},{"location":"user-guide/table-operations/#performance-features","text":"","title":"Performance Features"},{"location":"user-guide/table-operations/#optimization-tools","text":"Query performance analysis Scan vs. query recommendations Index usage optimization Cost estimation","title":"Optimization Tools"},{"location":"user-guide/table-operations/#monitoring-integration","text":"Real-time performance metrics Capacity utilization tracking Error rate monitoring Latency analysis","title":"Monitoring Integration"},{"location":"user-guide/table-operations/#data-exportimport","text":"","title":"Data Export/Import"},{"location":"user-guide/table-operations/#export-formats","text":"JSON CSV DynamoDB JSON format Custom templates","title":"Export Formats"},{"location":"user-guide/table-operations/#import-capabilities","text":"Bulk data import Schema validation Error handling and reporting Progress tracking This is a stub - full documentation will be generated from project source","title":"Import Capabilities"}]}